#  (C) 2006 by Remo Dentato (rdentato@users.sourceforge.net)
#
#  Permission to use, copy, modify and distribute this code and
# its documentation for any purpose is hereby granted without fee,
# provided that the above copyright notice, or equivalent attribution
# acknowledgement, appears in all copies and supporting documentation.
#  
#   Copyright holder makes no representations about the suitability
# of this software for any purpose. It is provided "as is" without
# express or implied warranty.

# * Introduction
#   This file is both a testsuite and part of the manual for yrx.
#   Every single matching operator is shown with examples. 
#   Group of patterns are defined with a number and the pattern enclosed
# in between two slashes ('/').
#   Following strings (enclosed in double quotes) are to be matched against
# the group of patterns. The number following the string indicates which
# pattern the string matches (0 if none).

# * Characters
# Usually characters in a pattern match themselves. 

1/plain string/
"plain string" 1 {plain string} {} {} {} {} {} {} {} {}
"other string" 0 {} {} {} {} {} {} {} {} {}

# * Character class
# A character set is way to specify a set of characters at once.
1/[aeiou]/                 # wovels
2/[bcdfghjklmnpqrstvwxyz]/ # consonants
"u" 1 {u} {} {} {} {} {} {} {} {}
"x" 2 {x} {} {} {} {} {} {} {} {}
"3" 0 {} {} {} {} {} {} {} {} {}

# A set may be specified with a range
1/[A-Ga-g]/    # Notes pitch
"A" 1 {A} {} {} {} {} {} {} {} {}
"b" 1 {b} {} {} {} {} {} {} {} {}
"K" 0 {} {} {} {} {} {} {} {} {}

# To specify characters that do not belong to a given set, the '^' symbol
# is used: 
1/[^A-Z]/        # any character that is not an uppercase letter
"u" 1 {u} {} {} {} {} {} {} {} {}
"X" 0 {} {} {} {} {} {} {} {} {}
"3" 1 {3} {} {} {} {} {} {} {} {}

# Also there are predefined classes:
#  \a    alphabetic character
#  \b    backspace character (ASCII 8)
#  \c    a "control" character (ASCII 1 to ASCII 7)
#  \d    decimal digit
#  \f    form feed character (ASCII 10)
#  \h    an hexadecimal digit ([0-9A-Za-z])
#  \l    lowercase  character
#  \n    newline character (ASCII 10)
#  \oxxx the character whose code is xxx (in octal)
#  \p    a punctuation character
#  \q    alphanumeric (a letter or a digit)
#  \r    carriage return character (ASCII 13)
#  \s    a spacing character (includes newlines, tabs, etc.) 
#  \t    tab character (ASCII 8)
#  \u    uppercase  character
#  \v    vertical tab character (ASCII 10)
#  \w    a "word" character ([\q_])
#  \xhh  the character whose code is hh (in hex)
#  \y    space or tab (ASCII 32 or ASCII 9)

1/\a\l\u\d\q\s\p\h\w\y/
"PaR1S :F_ "  1 {PaR1S :F_ } {} {} {} {} {} {} {} {}
"1Ag"         0 {} {} {} {} {} {} {} {} {}

# Note that the predefined sets are influenced by the current locale
# settings. This means that "\l" may be different from "[a-z]", for example
# the accented e "è" is considered a lowercase letter if locale is set to "It".

#  Predefined sets can be used within character set definitions.
1/[\d,]+/
2/[^\a\d]+/  # Anything but a letter or a digit
"543,21"   1 {543,21} {} {} {} {} {} {} {} {}
"100.31"   1 {100} {} {} {} {} {} {} {} {}
"abc@3"    2 {@} {} {} {} {} {} {} {} {}
"xyzwt"    0 {} {} {} {} {} {} {} {} {}


# * Recognizers
#   Some commonly used patterns have been predefined:
#      .    any character (except '\0'). Depending on the switch \E it
#           can also match an escaped character.
#     \Q    quoted string. Equivalent to:
#            ("(\\.|[^"])*"|'(\\.|[^'])*')
#     \N    decimal integer number. Equivalent to:
#            [+-]?\d+
#     \H    hex integer number. Equivalent to:
#            (0x)?\h+
#     \F    floating point number. Equivalent to:
#            [+-]?\d*(.\d*)?([eE][+-]?\d*(.\d*))?
#           but doesn't match the empty string
#     \L    generalized newline. Equivalent to:
#            (\r\n?|\n) 
#     \I    identifier. Equivalent to:
#            [\a_]\w+
#     \Bxy  balanced braces. The character x and y must be
#           different. For example %B() matches "(f(g(x))".
#     \W    white space. Equivalent to:
#            [ \t]*
#
#     \A
#     \Z
            
      
# * Grouping
#   Expressions can be grouped by parenthesis. If "X" is an expression, "(X)"
# is a pattern that defines the same set of strings as "X".
1/(a[bc])/
2/ab/       # this will never match!
3/\l\l/
"ab" 1 {ab} {} {} {} {} {} {} {} {}
"ac" 1 {ac} {} {} {} {} {} {} {} {}
"bc" 3 {bc} {} {} {} {} {} {} {} {}
"00" 0 {} {} {} {} {} {} {} {} {}
 
#   Within a group it is possible to define alternative patterns. 
# If "X" and "Y" are patterns, "(X|Y)" is a pattern that defines
# the set of strings that match "X" or "Y".
1/(ab|ac)/
2/\l\l/
"ab" 1 {ab} {} {} {} {} {} {} {} {}
"ac" 1 {ac} {} {} {} {} {} {} {} {}
"bc" 2 {bc} {} {} {} {} {} {} {} {}

# * Operators
#   The following operators can be applied to a pattern X:
#   ^X       matches X at the beginning of the input string
#    X$      matches X at the end of the input string
#    X*      matches 0 or more repetition of X
#    X+      matches 1 or more repetition of X
#    X?      matches X or the empty string
#    X<m,n>  matches m to n repetition of X
#    X<m>    matches m repetition of X
#    X<m,>   matches m or more repetition of X
#    X<,n>   matches 0 to n repetition of X
#    X!      matches the empty string if X doesn't match
#    X&      matches the empty string if X matches
#    X#      matches any string whose end matches X

1/^\l\l/   # two lowercase letters at the beginning of the string
2/\l\l$/   # two lowercase letters at the end of the string
3/\l\l/    # two lowercase letters anywhere in the string 
"xx<<" 1 {xx} {} {} {} {} {} {} {} {}
">>zy" 2 {zy} {} {} {} {} {} {} {} {}
">wy<" 3 {wy} {} {} {} {} {} {} {} {}
"q11p" 0 {} {} {} {} {} {} {} {} {}
"db"   1 {db} {} {} {} {} {} {} {} {}

1/.<2,3>/
"a"     0 {} {} {} {} {} {} {} {} {}
"ab"    1 {ab} {} {} {} {} {} {} {} {}
"abc"   1 {abc} {} {} {} {} {} {} {} {}
"abcd"  1 {abc} {} {} {} {} {} {} {} {}

1/.<0,3>/
"a"     1 {a} {} {} {} {} {} {} {} {}
"ab"    1 {ab} {} {} {} {} {} {} {} {}
"abc"   1 {abc} {} {} {} {} {} {} {} {}
"abcd"  1 {abc} {} {} {} {} {} {} {} {}

1/.<2,0>/
"a"     0 {} {} {} {} {} {} {} {} {}
"ab"    1 {ab} {} {} {} {} {} {} {} {}
"abc"   1 {abc} {} {} {} {} {} {} {} {}
"abcd"  1 {abcd} {} {} {} {} {} {} {} {}

1/,\d!/   # a comma not followed by a digit
2/\a:&/   # a letter followed by a colon
",x" 1 {,} {} {} {} {} {} {} {} {}
",3" 0 {} {} {} {} {} {} {} {} {}
".3" 0 {} {} {} {} {} {} {} {} {}
"x:" 2 {x} {} {} {} {} {} {} {} {}
"9:" 0 {} {} {} {} {} {} {} {} {}
"x." 0 {} {} {} {} {} {} {} {} {}

1/''#/  # string delimited by a single quote
"''"          1 {''} {} {} {} {} {} {} {} {}
"'aaa'"       1 {'aaa'} {} {} {} {} {} {} {} {}
"'aaa'bbb'"   1 {'aaa'} {} {} {} {} {} {} {} {}

# BEWARE! Since the YRX patterns are always greedy, you can't have  
#         alternates pattern with one of the patterns matching the empty
#         string.
1/(a*|b)+/
"aaaa"        1 {aaaa} {} {} {} {} {} {} {} {}
"aaaababab"   1 {aaaa} {} {} {} {} {} {} {} {}

1/(a*b?)+/
"aaaa"        1 {aaaa} {} {} {} {} {} {} {} {}
"aaaababab"   1 {aaaababab} {} {} {} {} {} {} {} {}

# * Special Characters
# If a special character is to be matched literally, it must be 
# escaped with a backslash. Except if they are inside a character set.
1/\[.[|*#^$&!()?+{}<>\\]+\]/
"[*))((*]" 1 {[*))((*]} {} {} {} {} {} {} {} {}

# * Captures
#   Part of the matching string can be captured and returned among results.
# There can be up to 8 captures.
#    {   begin capture
#    }   end capture
#    \1  reference 1st capture
#    \2  reference 2nd capture
#    ...  
#    \8  reference 8th capture

1/{\a}\1/    # twice the same letter
2/{\a\a}\1/  # twice the same couple of letters
"xaax" 1 {aa} {a} {} {} {} {} {} {} {}
"xaxa" 2 {xaxa} {xa} {} {} {} {} {} {} {}
"abcd" 0 {} {} {} {} {} {} {} {} {}

1/{.}\1#/   # a string delimited by its first character
"'abcd'" 1 {'abcd'} {'} {} {} {} {} {} {} {}
"<abcd>" 0 {} {} {} {} {} {} {} {} {}
"$$"     1 {$$} {$} {} {} {} {} {} {} {}

1/:{\l{\d+}}:/ # nested captures
":a123:" 1 {:a123:} {a123} {123} {} {} {} {} {} {}

1/a{({bc}|{bd})}/
"abc"  1 {abc} {bc} {bc} {} {} {} {} {} {}
"abd"  1 {abd} {bd} {} {bd} {} {} {} {} {}
"xbd"  0 {} {} {} {} {} {} {} {} {}
"abe"  0 {} {} {} {} {} {} {} {} {}

1/\y*{\l+}\({[?\)]*}\)/
"xx"0 {} {} {} {} {} {} {} {} {}

# * Switch
#   A switch turns on and off a specific feature of the pattern matchin
# engine.
#    \C    case sensitive match on/off
#    \Ex   turns on escaped match for the "." recognizer   
#    \e    turns off escaped match

1/abcd/
2/ab\Ccd/
"abcd" 1 {abcd} {} {} {} {} {} {} {} {}
"abCd" 2 {abCd} {} {} {} {} {} {} {} {}
"ABcd" 0 {} {} {} {} {} {} {} {} {}

1/\E\\''#/     # Remember that "X#"" is equivalente to "(X!.)*X"
2/\E`{.}\1#/
"'abcde'"     1 {'abcde'} {} {} {} {} {} {} {} {}
"$xyz$"       2 {$xyz$} {$} {} {} {} {} {} {} {}
"$xyz`$abc$"  2 {$xyz`$abc$} {$} {} {} {} {} {} {} {}
"abcd"        0 {} {} {} {} {} {} {} {} {}

1/\E$'{[^']*}'\e{[^']*}'/
"'ab'cd'"         1 {'ab'cd'} {ab} {cd} {} {} {} {} {} {}
"'ab$'cd'ef'"     1 {'ab$'cd'ef'} {ab$'cd} {ef} {} {} {} {} {} {}
"'ab$'cd'ef$'gh'" 1 {'ab$'cd'ef$'} {ab$'cd} {ef$} {} {} {} {} {} {}

# * Stress tests

1/the quick brown fox/
2/\Cthe quick brown fox/
"the quick brown fox" 1 {the quick brown fox} {} {} {} {} {} {} {} {}
"The quick brown FOX" 2 {The quick brown FOX} {} {} {} {} {} {} {} {}
"What do you know about the quick brown fox?" 1 {the quick brown fox} {} {} {} {} {} {} {} {}
"What do you know about THE QUICK BROWN FOX?" 1 {THE QUICK BROWN FOX} {} {} {} {} {} {} {} {}

1/abcd\t\n\r\f\a\x1B\071\x3b\$\\\?caxyz/
"abcd\t\n\r\f\a\x1B9;\$\\?caxyz"0 {} {} {} {} {} {} {} {} {}

1/a*bc?xyz+pqr<3>ab<2,>xy<4,5>pq<0,6>AB<0,>zz/
"abxyzpqrrrabbxyyyypqAzz"           1 {abxyzpqrrrabbxyyyypqAzz} {} {} {} {} {} {} {} {}

"abxyzpqrrrabbxyyyypqAzz"           1 {abxyzpqrrrabbxyyyypqAzz} {} {} {} {} {} {} {} {}
"aabxyzpqrrrabbxyyyypqAzz"          1 {aabxyzpqrrrabbxyyyypqAzz} {} {} {} {} {} {} {} {}
"aaabxyzpqrrrabbxyyyypqAzz"         1 {aaabxyzpqrrrabbxyyyypqAzz} {} {} {} {} {} {} {} {}
"aaaabxyzpqrrrabbxyyyypqAzz"        1 {aaaabxyzpqrrrabbxyyyypqAzz} {} {} {} {} {} {} {} {}
"abcxyzpqrrrabbxyyyypqAzz"          1 {abcxyzpqrrrabbxyyyypqAzz} {} {} {} {} {} {} {} {}
"aabcxyzpqrrrabbxyyyypqAzz"         1 {aabcxyzpqrrrabbxyyyypqAzz} {} {} {} {} {} {} {} {}
"aaabcxyzpqrrrabbxyyyypAzz"         1 {aaabcxyzpqrrrabbxyyyypAzz} {} {} {} {} {} {} {} {}
"aaabcxyzpqrrrabbxyyyypqAzz"        1 {aaabcxyzpqrrrabbxyyyypqAzz} {} {} {} {} {} {} {} {}
"aaabcxyzpqrrrabbxyyyypqqAzz"       1 {aaabcxyzpqrrrabbxyyyypqqAzz} {} {} {} {} {} {} {} {}
"aaabcxyzpqrrrabbxyyyypqqqAzz"      1 {aaabcxyzpqrrrabbxyyyypqqqAzz} {} {} {} {} {} {} {} {}
"aaabcxyzpqrrrabbxyyyypqqqqAzz"     1 {aaabcxyzpqrrrabbxyyyypqqqqAzz} {} {} {} {} {} {} {} {}
"aaabcxyzpqrrrabbxyyyypqqqqqAzz"    1 {aaabcxyzpqrrrabbxyyyypqqqqqAzz} {} {} {} {} {} {} {} {}
"aaabcxyzpqrrrabbxyyyypqqqqqqAzz"   1 {aaabcxyzpqrrrabbxyyyypqqqqqqAzz} {} {} {} {} {} {} {} {}
"aaaabcxyzpqrrrabbxyyyypqAzz"       1 {aaaabcxyzpqrrrabbxyyyypqAzz} {} {} {} {} {} {} {} {}
"abxyzzpqrrrabbxyyyypqAzz"          1 {abxyzzpqrrrabbxyyyypqAzz} {} {} {} {} {} {} {} {}
"aabxyzzzpqrrrabbxyyyypqAzz"        1 {aabxyzzzpqrrrabbxyyyypqAzz} {} {} {} {} {} {} {} {}
"aaabxyzzzzpqrrrabbxyyyypqAzz"      1 {aaabxyzzzzpqrrrabbxyyyypqAzz} {} {} {} {} {} {} {} {}
"aaaabxyzzzzpqrrrabbxyyyypqAzz"     1 {aaaabxyzzzzpqrrrabbxyyyypqAzz} {} {} {} {} {} {} {} {}
"abcxyzzpqrrrabbxyyyypqAzz"         1 {abcxyzzpqrrrabbxyyyypqAzz} {} {} {} {} {} {} {} {}
"aabcxyzzzpqrrrabbxyyyypqAzz"       1 {aabcxyzzzpqrrrabbxyyyypqAzz} {} {} {} {} {} {} {} {}
"aaabcxyzzzzpqrrrabbxyyyypqAzz"     1 {aaabcxyzzzzpqrrrabbxyyyypqAzz} {} {} {} {} {} {} {} {}
"aaaabcxyzzzzpqrrrabbxyyyypqAzz"    1 {aaaabcxyzzzzpqrrrabbxyyyypqAzz} {} {} {} {} {} {} {} {}
"aaaabcxyzzzzpqrrrabbbxyyyypqAzz"   1 {aaaabcxyzzzzpqrrrabbbxyyyypqAzz} {} {} {} {} {} {} {} {}
"aaaabcxyzzzzpqrrrabbbxyyyyypqAzz"  1 {aaaabcxyzzzzpqrrrabbbxyyyyypqAzz} {} {} {} {} {} {} {} {}
"aaabcxyzpqrrrabbxyyyypABzz"        1 {aaabcxyzpqrrrabbxyyyypABzz} {} {} {} {} {} {} {} {}
"aaabcxyzpqrrrabbxyyyypABBzz"       1 {aaabcxyzpqrrrabbxyyyypABBzz} {} {} {} {} {} {} {} {}
">>>aaabxyzpqrrrabbxyyyypqAzz"      1 {aaabxyzpqrrrabbxyyyypqAzz} {} {} {} {} {} {} {} {}
">aaaabxyzpqrrrabbxyyyypqAzz"       1 {aaaabxyzpqrrrabbxyyyypqAzz} {} {} {} {} {} {} {} {}
">>>>abcxyzpqrrrabbxyyyypqAzz"      1 {abcxyzpqrrrabbxyyyypqAzz} {} {} {} {} {} {} {} {}
"abxyzpqrrabbxyyyypqAzz"            0 {} {} {} {} {} {} {} {} {}
"abxyzpqrrrrabbxyyyypqAzz"          0 {} {} {} {} {} {} {} {} {}
"abxyzpqrrrabxyyyypqAzz"            0 {} {} {} {} {} {} {} {} {}
"aaaabcxyzzzzpqrrrabbbxyyyyyypqAzz" 0 {} {} {} {} {} {} {} {} {}
"aaaabcxyzzzzpqrrrabbbxyyypqAzz"    0 {} {} {} {} {} {} {} {} {}
"aaabcxyzpqrrrabbxyyyypqqqqqqqAzz"  0 {} {} {} {} {} {} {} {} {}

1/^(abc)<1,2>zz/
"abczz"        1 {abczz} {} {} {} {} {} {} {} {}
"abcabczz"     1 {abcabczz} {} {} {} {} {} {} {} {}
"zz"           0 {} {} {} {} {} {} {} {} {}
"abcabcabczz"  0 {} {} {} {} {} {} {} {} {}
">>abczz"      0 {} {} {} {} {} {} {} {} {}

1/^(b*|a)<1,2>c/
"bc"              1 {bc} {} {} {} {} {} {} {} {}
"bbc"             1 {bbc} {} {} {} {} {} {} {} {}
"bbbc"            1 {bbbc} {} {} {} {} {} {} {} {}
"bac"             0 {} {} {} {} {} {} {} {} {}
"bbac"            0 {} {} {} {} {} {} {} {} {}
"aac"             0 {} {} {} {} {} {} {} {} {}
"abbbbbbbbbbbc"   0 {} {} {} {} {} {} {} {} {}
"bbbbbbbbbbbac"   0 {} {} {} {} {} {} {} {} {}
"aaac"            0 {} {} {} {} {} {} {} {} {}
"abbbbbbbbbbbac"  0 {} {} {} {} {} {} {} {} {}

1/^(b+|a)<1,2>c/
"bc"              1 {bc} {} {} {} {} {} {} {} {}
"bbc"             1 {bbc} {} {} {} {} {} {} {} {}
"bbbc"            1 {bbbc} {} {} {} {} {} {} {} {}
"bac"             1 {bac} {} {} {} {} {} {} {} {}
"bbac"            1 {bbac} {} {} {} {} {} {} {} {}
"aac"             1 {aac} {} {} {} {} {} {} {} {}
"abbbbbbbbbbbc"   1 {abbbbbbbbbbbc} {} {} {} {} {} {} {} {}
"bbbbbbbbbbbac"   1 {bbbbbbbbbbbac} {} {} {} {} {} {} {} {}
"aaac"            0 {} {} {} {} {} {} {} {} {}
"abbbbbbbbbbbac"  0 {} {} {} {} {} {} {} {} {}

1/^[ab\]cde]/
"athing"  1 {a} {} {} {} {} {} {} {} {}
"bthing"  1 {b} {} {} {} {} {} {} {} {}
"]thing"  1 {]} {} {} {} {} {} {} {} {}
"cthing"  1 {c} {} {} {} {} {} {} {} {}
"dthing"  1 {d} {} {} {} {} {} {} {} {}
"ething"  1 {e} {} {} {} {} {} {} {} {}
"fthing"  0 {} {} {} {} {} {} {} {} {}
"[thing"  0 {} {} {} {} {} {} {} {} {}
"\\thing" 0 {} {} {} {} {} {} {} {} {}

1/^[]cde]/
"]thing"  1 {]} {} {} {} {} {} {} {} {}
"cthing"  1 {c} {} {} {} {} {} {} {} {}
"dthing"  1 {d} {} {} {} {} {} {} {} {}
"ething"  1 {e} {} {} {} {} {} {} {} {}
"athing"  0 {} {} {} {} {} {} {} {} {}
"fthing"  0 {} {} {} {} {} {} {} {} {}

1/^[^ab\]cde]/
"fthing"  1 {f} {} {} {} {} {} {} {} {}
"[thing"  1 {[} {} {} {} {} {} {} {} {}
"\\thing" 1 {\} {} {} {} {} {} {} {} {}
"athing"  0 {} {} {} {} {} {} {} {} {}
"bthing"  0 {} {} {} {} {} {} {} {} {}
"]thing"  0 {} {} {} {} {} {} {} {} {}
"cthing"  0 {} {} {} {} {} {} {} {} {}
"dthing"  0 {} {} {} {} {} {} {} {} {}
"ething"  0 {} {} {} {} {} {} {} {} {}

1/^[^]cde]/
"athing"  1 {a} {} {} {} {} {} {} {} {}
"fthing"  1 {f} {} {} {} {} {} {} {} {}
"]thing"  0 {} {} {} {} {} {} {} {} {}
"cthing"  0 {} {} {} {} {} {} {} {} {}
"dthing"  0 {} {} {} {} {} {} {} {} {}
"ething"  0 {} {} {} {} {} {} {} {} {}

1/^ÿ/
"ÿ"1 {ÿ} {} {} {} {} {} {} {} {}

1/^[0-9]+$/
"0"1 {0} {} {} {} {} {} {} {} {}
"1"1 {1} {} {} {} {} {} {} {} {}
"2"1 {2} {} {} {} {} {} {} {} {}
"3"1 {3} {} {} {} {} {} {} {} {}
"4"1 {4} {} {} {} {} {} {} {} {}
"5"1 {5} {} {} {} {} {} {} {} {}
"6"1 {6} {} {} {} {} {} {} {} {}
"7"1 {7} {} {} {} {} {} {} {} {}
"8"1 {8} {} {} {} {} {} {} {} {}
"9"1 {9} {} {} {} {} {} {} {} {}
"10"1 {10} {} {} {} {} {} {} {} {}
"100"1 {100} {} {} {} {} {} {} {} {}
"abc"0 {} {} {} {} {} {} {} {} {}

1/^.*nter/  # This will never match! (.*) will eat up everything
"enter"    0 {} {} {} {} {} {} {} {} {}
"inter"    0 {} {} {} {} {} {} {} {} {}
"uponter"  0 {} {} {} {} {} {} {} {} {}

1/^(nter)#/  # This matches anything that ends in "nter"  
"enter"    1 {enter} {} {} {} {} {} {} {} {}
"inter"    1 {inter} {} {} {} {} {} {} {} {}
"uponter"  1 {uponter} {} {} {} {} {} {} {} {}

1/^xxx[0-9]+$/
"xxx0"    1 {xxx0} {} {} {} {} {} {} {} {}
"xxx1234" 1 {xxx1234} {} {} {} {} {} {} {} {}
"xxx"     0 {} {} {} {} {} {} {} {} {}

1/^.+[0-9][0-9][0-9]$/  # This will never match! (.+) will eat up everything
"x123"   0 {} {} {} {} {} {} {} {} {}
"xx123"  0 {} {} {} {} {} {} {} {} {}
"123456" 0 {} {} {} {} {} {} {} {} {}
"x1234"  0 {} {} {} {} {} {} {} {} {}
"1234"   0 {} {} {} {} {} {} {} {} {}
"123"    0 {} {} {} {} {} {} {} {} {}

1/^.([0-9][0-9][0-9][0-9]!)#$/  
"x123"   1 {x123} {} {} {} {} {} {} {} {}
"xx123"  1 {xx123} {} {} {} {} {} {} {} {}
"123456" 1 {123456} {} {} {} {} {} {} {} {}
"x1234"  1 {x1234} {} {} {} {} {} {} {} {}
"1234"   1 {1234} {} {} {} {} {} {} {} {}
"123"    0 {} {} {} {} {} {} {} {} {}

1/^{[^\!]+}\!{=#}{[apquxz]+}\.{[ixr]+}\.{[z]+}\.{[ac]+}\.uk$/
"abc!pqr=apquxz.ixr.zzz.ac.uk"   1 {abc!pqr=apquxz.ixr.zzz.ac.uk} {abc} {pqr=} {apquxz} {ixr} {zzz} {ac} {} {}
"!pqr=apquxz.ixr.zzz.ac.uk"      0 {} {} {} {} {} {} {} {} {} 
"abc!=apquxz.ixr.zzz.ac.uk"      1 {abc!=apquxz.ixr.zzz.ac.uk} {abc} {=} {apquxz} {ixr} {zzz} {ac} {} {}
"abc!pqr=apquxz:ixr.zzz.ac.uk"   0 {} {} {} {} {} {} {} {} {}
"abc!pqr=apquxz.ixr.zzz.ac.ukk"  0 {} {} {} {} {} {} {} {} {}

1/:/
"Well, we need a colon: somewhere"  1 {:} {} {} {} {} {} {} {} {}
"Fail if we don't"                  0 {} {} {} {} {} {} {} {} {}

1/^(\d+)\s+IN\s+SOA\s+{[^\s]+}\s+{[^\s\(]+}\s*\(\s*$/

"1 IN SOA non-sp1 non-sp2("                  1 {1 IN SOA non-sp1 non-sp2(} {non-sp1} {non-sp2} {} {} {} {} {} {}
"1    IN    SOA    non-sp1    non-sp2   ("   1 {1    IN    SOA    non-sp1    non-sp2   (} {non-sp1} {non-sp2} {} {} {} {} {} {}
"1IN SOA non-sp1 non-sp2("                   0 {} {} {} {} {} {} {} {} {}

1/^{[a-zA-Z\d][a-zA-Z\d\-]*}(\.{[a-zA-Z\d][a-zA-z\d\-]*})*\.$/
"a."             1 {a.} {a} {} {} {} {} {} {} {}
"Z."             1 {Z.} {Z} {} {} {} {} {} {} {}
"2."             1 {2.} {2} {} {} {} {} {} {} {}
"ab-c.pq-r."     1 {ab-c.pq-r.} {ab-c} {pq-r} {} {} {} {} {} {}
"sxk.zzz.ac.uk." 1 {sxk.zzz.ac.uk.} {sxk} {uk} {} {} {} {} {} {}
"x-.y-."         1 {x-.y-.} {x-} {y-} {} {} {} {} {} {}
"-abc.peq."      0 {} {} {} {} {} {} {} {} {}

1/^\*{\.[a-z](-?[a-z\d])*}{(\.[a-z](-?[a-z\d])*)*}$/
"*.a"       1 {*.a} {.a} {} {} {} {} {} {} {}
"*.b0-a"    1 {*.b0-a} {.b0-a} {} {} {} {} {} {} {}
"*.c3-b.c"  1 {*.c3-b.c} {.c3-b} {.c} {} {} {} {} {} {}
"*.c-a.b-c" 1 {*.c-a.b-c} {.c-a} {.b-c} {} {} {} {} {} {}
"*.0"       0 {} {} {} {} {} {} {} {} {}
"*.a-"      0 {} {} {} {} {} {} {} {} {}
"*.a-b.c-"  0 {} {} {} {} {} {} {} {} {}
"*.c-a.0-c" 0 {} {} {} {} {} {} {} {} {}

1/{(cat(a(ract|tonic)|erpillar))} \12(3)/
"cataract cataract23"       0 {} {} {} {} {} {} {} {} {}
"catatonic catatonic23"     0 {} {} {} {} {} {} {} {} {}
"caterpillar caterpillar23" 0 {} {} {} {} {} {} {} {} {}


/^From +([^ ]+) +[a-zA-Z][a-zA-Z][a-zA-Z] +[a-zA-Z][a-zA-Z][a-zA-Z] +[0-9]?[0-9] +[0-9][0-9]:[0-9][0-9]/
"From abcd  Mon Sep 01 12:33:02 1997"

/^From\s+\S+\s+([a-zA-Z]<3>\s+)<2>\d<1,2>\s+\d\d:\d\d/
"From abcd  Mon Sep 01 12:33:02 1997"
"From abcd  Mon Sep  1 12:33:02 1997"
"From abcd  Sep 01 12:33:02 1997"

/^12.34/s"
"12\n34"
"12\r34"

/\w+(=\t)/
"the quick brown\t fox"

/foo(bar)(.*)/
"foobar is foolish see?"

/(:(foo)...|^.<0,2>)bar(.*)/
"foobar crowbar etc"
"barrel"
"2barrel"
"A barrel"

/^(\D*)(=\d)(123)/
"abc456"
"abc123"

/^1234(# test newlines"
"inside)/
"1234"

/^1234 #comment in extended re"
"/
"1234"

/#rhubarb"
"abcd/
"abcd"

/^abcd#rhubarb/
"abcd"

/^(a)\1<2,3>(.)/
"aaab"
"aaaab"
"aaaaab"
"aaaaaab"

/(^)abc/
"the abc"
"abc"

/(=^)abc/
"abc"
"the abc"

/^[ab]<1,3>(ab*|b)/
"aabbbbb"

/^[ab]<1,3>(ab*|b)/
"aabbbbb"

/^[ab]<1,3>(ab*|b)/
"aabbbbb"

/^[ab]<1,3>(ab*|b)/
"aabbbbb"

/  (: [\040\t] |  \("
(:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  |  \( (:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  )* \)  )*"
\)  )*                          # optional leading comment"
(:    (:"
[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+    # some number of atom characters..."
([^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]) # ..not followed by something that could be part of an atom"
|"
" (:                      # opening quote..."
[^\\\x80-\xff\n\015"]                #   Anything except backslash and quote"
|                     #    or"
\\ [^\x80-\xff]           #   Escaped something (something != CR)"
)* "  # closing quote"
)                    # initial word"
(:  (: [\040\t] |  \("
(:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  |  \( (:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  )* \)  )*"
\)  )*  \.  (: [\040\t] |  \("
(:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  |  \( (:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  )* \)  )*"
\)  )*   (:"
[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+    # some number of atom characters..."
([^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]) # ..not followed by something that could be part of an atom"
|"
" (:                      # opening quote..."
[^\\\x80-\xff\n\015"]                #   Anything except backslash and quote"
|                     #    or"
\\ [^\x80-\xff]           #   Escaped something (something != CR)"
)* "  # closing quote"
)  )* # further okay, if led by a period"
(: [\040\t] |  \("
(:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  |  \( (:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  )* \)  )*"
\)  )*  @  (: [\040\t] |  \("
(:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  |  \( (:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  )* \)  )*"
\)  )*    (:"
[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+    # some number of atom characters..."
([^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]) # ..not followed by something that could be part of an atom"
|   \[                         # ["
(: [^\\\x80-\xff\n\015\[\]] |  \\ [^\x80-\xff]  )*    #    stuff"
\]                        #           ]"
)                           # initial subdomain"
(:                                  #"
(: [\040\t] |  \("
(:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  |  \( (:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  )* \)  )*"
\)  )*  \.                        # if led by a period..."
(: [\040\t] |  \("
(:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  |  \( (:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  )* \)  )*"
\)  )*   (:"
[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+    # some number of atom characters..."
([^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]) # ..not followed by something that could be part of an atom"
|   \[                         # ["
(: [^\\\x80-\xff\n\015\[\]] |  \\ [^\x80-\xff]  )*    #    stuff"
\]                        #           ]"
)                     #   ...further okay"
)*"
# address"
|                     #  or"
(:"
[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+    # some number of atom characters..."
([^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]) # ..not followed by something that could be part of an atom"
|"
" (:                      # opening quote..."
[^\\\x80-\xff\n\015"]                #   Anything except backslash and quote"
|                     #    or"
\\ [^\x80-\xff]           #   Escaped something (something != CR)"
)* "  # closing quote"
)             # one word, optionally followed by...."
(:"
[^<>@,;:".\\\[\]\x80-\xff\000-\010\012-\037]  |  # atom and space parts, or..."
\("
(:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  |  \( (:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  )* \)  )*"
\)       |  # comments, or..."

" (:                      # opening quote..."
[^\\\x80-\xff\n\015"]                #   Anything except backslash and quote"
|                     #    or"
\\ [^\x80-\xff]           #   Escaped something (something != CR)"
)* "  # closing quote"
# quoted strings"
)*"
<  (: [\040\t] |  \("
(:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  |  \( (:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  )* \)  )*"
\)  )*                     # leading <"
(:  @  (: [\040\t] |  \("
(:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  |  \( (:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  )* \)  )*"
\)  )*    (:"
[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+    # some number of atom characters..."
([^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]) # ..not followed by something that could be part of an atom"
|   \[                         # ["
(: [^\\\x80-\xff\n\015\[\]] |  \\ [^\x80-\xff]  )*    #    stuff"
\]                        #           ]"
)                           # initial subdomain"
(:                                  #"
(: [\040\t] |  \("
(:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  |  \( (:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  )* \)  )*"
\)  )*  \.                        # if led by a period..."
(: [\040\t] |  \("
(:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  |  \( (:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  )* \)  )*"
\)  )*   (:"
[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+    # some number of atom characters..."
([^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]) # ..not followed by something that could be part of an atom"
|   \[                         # ["
(: [^\\\x80-\xff\n\015\[\]] |  \\ [^\x80-\xff]  )*    #    stuff"
\]                        #           ]"
)                     #   ...further okay"
)*"

(:  (: [\040\t] |  \("
(:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  |  \( (:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  )* \)  )*"
\)  )*  ,  (: [\040\t] |  \("
(:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  |  \( (:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  )* \)  )*"
\)  )*  @  (: [\040\t] |  \("
(:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  |  \( (:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  )* \)  )*"
\)  )*    (:"
[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+    # some number of atom characters..."
([^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]) # ..not followed by something that could be part of an atom"
|   \[                         # ["
(: [^\\\x80-\xff\n\015\[\]] |  \\ [^\x80-\xff]  )*    #    stuff"
\]                        #           ]"
)                           # initial subdomain"
(:                                  #"
(: [\040\t] |  \("
(:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  |  \( (:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  )* \)  )*"
\)  )*  \.                        # if led by a period..."
(: [\040\t] |  \("
(:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  |  \( (:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  )* \)  )*"
\)  )*   (:"
[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+    # some number of atom characters..."
([^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]) # ..not followed by something that could be part of an atom"
|   \[                         # ["
(: [^\\\x80-\xff\n\015\[\]] |  \\ [^\x80-\xff]  )*    #    stuff"
\]                        #           ]"
)                     #   ...further okay"
)*"
)* # further okay, if led by comma"
:                                # closing colon"
(: [\040\t] |  \("
(:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  |  \( (:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  )* \)  )*"
\)  )*  )? #       optional route"
(:"
[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+    # some number of atom characters..."
([^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]) # ..not followed by something that could be part of an atom"
|"
" (:                      # opening quote..."
[^\\\x80-\xff\n\015"]                #   Anything except backslash and quote"
|                     #    or"
\\ [^\x80-\xff]           #   Escaped something (something != CR)"
)* "  # closing quote"
)                    # initial word"
(:  (: [\040\t] |  \("
(:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  |  \( (:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  )* \)  )*"
\)  )*  \.  (: [\040\t] |  \("
(:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  |  \( (:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  )* \)  )*"
\)  )*   (:"
[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+    # some number of atom characters..."
([^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]) # ..not followed by something that could be part of an atom"
|"
" (:                      # opening quote..."
[^\\\x80-\xff\n\015"]                #   Anything except backslash and quote"
|                     #    or"
\\ [^\x80-\xff]           #   Escaped something (something != CR)"
)* "  # closing quote"
)  )* # further okay, if led by a period"
(: [\040\t] |  \("
(:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  |  \( (:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  )* \)  )*"
\)  )*  @  (: [\040\t] |  \("
(:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  |  \( (:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  )* \)  )*"
\)  )*    (:"
[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+    # some number of atom characters..."
([^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]) # ..not followed by something that could be part of an atom"
|   \[                         # ["
(: [^\\\x80-\xff\n\015\[\]] |  \\ [^\x80-\xff]  )*    #    stuff"
\]                        #           ]"
)                           # initial subdomain"
(:                                  #"
(: [\040\t] |  \("
(:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  |  \( (:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  )* \)  )*"
\)  )*  \.                        # if led by a period..."
(: [\040\t] |  \("
(:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  |  \( (:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  )* \)  )*"
\)  )*   (:"
[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+    # some number of atom characters..."
([^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]) # ..not followed by something that could be part of an atom"
|   \[                         # ["
(: [^\\\x80-\xff\n\015\[\]] |  \\ [^\x80-\xff]  )*    #    stuff"
\]                        #           ]"
)                     #   ...further okay"
)*"
#       address spec"
(: [\040\t] |  \("
(:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  |  \( (:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  )* \)  )*"
\)  )*  > #                  trailing >"
# name and address"
)  (: [\040\t] |  \("
(:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  |  \( (:  [^\\\x80-\xff\n\015]  |  \\ [^\x80-\xff]  )* \)  )*"
\)  )*                       # optional trailing comment"
/
"Alan Other <user\@dom.ain>"
"<user\@dom.ain>"
"user\@dom.ain"
"\"A. Other\" <user.1234\@dom.ain> (a comment)"
"A. Other <user.1234\@dom.ain> (a comment)"
"\"/s=user/ou=host/o=place/prmd=uu.yy/admd= /c=gb/\"\@x400-re.lay"
"A missing angle <user\@some.where"
"The quick brown fox"

/[\040\t]*                    # Nab whitespace."
(:"
\(                              #  ("
[^\\\x80-\xff\n\015] *                             #     normal*"
(:                                 #       ("
(:  \\ [^\x80-\xff]  |"
\(                            #  ("
[^\\\x80-\xff\n\015] *                            #     normal*"
(:  \\ [^\x80-\xff]   [^\\\x80-\xff\n\015] * )*        #     (special normal*)*"
\)                           #                       )"
)    #         special"
[^\\\x80-\xff\n\015] *                         #         normal*"
)*                                  #            )*"
\)                             #                )"
[\040\t]* )*    # If comment found, allow more spaces."
# optional leading comment"
(:"
(:"
[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+    # some number of atom characters..."
([^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]) # ..not followed by something that could be part of an atom"
# Atom"
|                       #  or"
"                                     # ""
[^\\\x80-\xff\n\015"] *                            #   normal"
(:  \\ [^\x80-\xff]  [^\\\x80-\xff\n\015"] * )*        #   ( special normal* )*"
"                                     #        ""
# Quoted string"
)"
[\040\t]*                    # Nab whitespace."
(:"
\(                              #  ("
[^\\\x80-\xff\n\015] *                             #     normal*"
(:                                 #       ("
(:  \\ [^\x80-\xff]  |"
\(                            #  ("
[^\\\x80-\xff\n\015] *                            #     normal*"
(:  \\ [^\x80-\xff]   [^\\\x80-\xff\n\015] * )*        #     (special normal*)*"
\)                           #                       )"
)    #         special"
[^\\\x80-\xff\n\015] *                         #         normal*"
)*                                  #            )*"
\)                             #                )"
[\040\t]* )*    # If comment found, allow more spaces."
(:"
\."
[\040\t]*                    # Nab whitespace."
(:"
\(                              #  ("
[^\\\x80-\xff\n\015] *                             #     normal*"
(:                                 #       ("
(:  \\ [^\x80-\xff]  |"
\(                            #  ("
[^\\\x80-\xff\n\015] *                            #     normal*"
(:  \\ [^\x80-\xff]   [^\\\x80-\xff\n\015] * )*        #     (special normal*)*"
\)                           #                       )"
)    #         special"
[^\\\x80-\xff\n\015] *                         #         normal*"
)*                                  #            )*"
\)                             #                )"
[\040\t]* )*    # If comment found, allow more spaces."
(:"
[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+    # some number of atom characters..."
([^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]) # ..not followed by something that could be part of an atom"
# Atom"
|                       #  or"
"                                     # ""
[^\\\x80-\xff\n\015"] *                            #   normal"
(:  \\ [^\x80-\xff]  [^\\\x80-\xff\n\015"] * )*        #   ( special normal* )*"
"                                     #        ""
# Quoted string"
)"
[\040\t]*                    # Nab whitespace."
(:"
\(                              #  ("
[^\\\x80-\xff\n\015] *                             #     normal*"
(:                                 #       ("
(:  \\ [^\x80-\xff]  |"
\(                            #  ("
[^\\\x80-\xff\n\015] *                            #     normal*"
(:  \\ [^\x80-\xff]   [^\\\x80-\xff\n\015] * )*        #     (special normal*)*"
\)                           #                       )"
)    #         special"
[^\\\x80-\xff\n\015] *                         #         normal*"
)*                                  #            )*"
\)                             #                )"
[\040\t]* )*    # If comment found, allow more spaces."
# additional words"
)*"
@"
[\040\t]*                    # Nab whitespace."
(:"
\(                              #  ("
[^\\\x80-\xff\n\015] *                             #     normal*"
(:                                 #       ("
(:  \\ [^\x80-\xff]  |"
\(                            #  ("
[^\\\x80-\xff\n\015] *                            #     normal*"
(:  \\ [^\x80-\xff]   [^\\\x80-\xff\n\015] * )*        #     (special normal*)*"
\)                           #                       )"
)    #         special"
[^\\\x80-\xff\n\015] *                         #         normal*"
)*                                  #            )*"
\)                             #                )"
[\040\t]* )*    # If comment found, allow more spaces."
(:"
[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+    # some number of atom characters..."
([^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]) # ..not followed by something that could be part of an atom"
|"
\[                            # ["
(: [^\\\x80-\xff\n\015\[\]] |  \\ [^\x80-\xff]  )*     #    stuff"
\]                           #           ]"
)"
[\040\t]*                    # Nab whitespace."
(:"
\(                              #  ("
[^\\\x80-\xff\n\015] *                             #     normal*"
(:                                 #       ("
(:  \\ [^\x80-\xff]  |"
\(                            #  ("
[^\\\x80-\xff\n\015] *                            #     normal*"
(:  \\ [^\x80-\xff]   [^\\\x80-\xff\n\015] * )*        #     (special normal*)*"
\)                           #                       )"
)    #         special"
[^\\\x80-\xff\n\015] *                         #         normal*"
)*                                  #            )*"
\)                             #                )"
[\040\t]* )*    # If comment found, allow more spaces."
# optional trailing comments"
(:"
\."
[\040\t]*                    # Nab whitespace."
(:"
\(                              #  ("
[^\\\x80-\xff\n\015] *                             #     normal*"
(:                                 #       ("
(:  \\ [^\x80-\xff]  |"
\(                            #  ("
[^\\\x80-\xff\n\015] *                            #     normal*"
(:  \\ [^\x80-\xff]   [^\\\x80-\xff\n\015] * )*        #     (special normal*)*"
\)                           #                       )"
)    #         special"
[^\\\x80-\xff\n\015] *                         #         normal*"
)*                                  #            )*"
\)                             #                )"
[\040\t]* )*    # If comment found, allow more spaces."
(:"
[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+    # some number of atom characters..."
([^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]) # ..not followed by something that could be part of an atom"
|"
\[                            # ["
(: [^\\\x80-\xff\n\015\[\]] |  \\ [^\x80-\xff]  )*     #    stuff"
\]                           #           ]"
)"
[\040\t]*                    # Nab whitespace."
(:"
\(                              #  ("
[^\\\x80-\xff\n\015] *                             #     normal*"
(:                                 #       ("
(:  \\ [^\x80-\xff]  |"
\(                            #  ("
[^\\\x80-\xff\n\015] *                            #     normal*"
(:  \\ [^\x80-\xff]   [^\\\x80-\xff\n\015] * )*        #     (special normal*)*"
\)                           #                       )"
)    #         special"
[^\\\x80-\xff\n\015] *                         #         normal*"
)*                                  #            )*"
\)                             #                )"
[\040\t]* )*    # If comment found, allow more spaces."
# optional trailing comments"
)*"
# address"
|                             #  or"
(:"
[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+    # some number of atom characters..."
([^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]) # ..not followed by something that could be part of an atom"
# Atom"
|                       #  or"
"                                     # ""
[^\\\x80-\xff\n\015"] *                            #   normal"
(:  \\ [^\x80-\xff]  [^\\\x80-\xff\n\015"] * )*        #   ( special normal* )*"
"                                     #        ""
# Quoted string"
)"
# leading word"
[^<>@,;:".\\\[\]\x80-\xff\000-\010\012-\037] *               # "normal" atoms and or spaces"
(:"
(:"
\(                              #  ("
[^\\\x80-\xff\n\015] *                             #     normal*"
(:                                 #       ("
(:  \\ [^\x80-\xff]  |"
\(                            #  ("
[^\\\x80-\xff\n\015] *                            #     normal*"
(:  \\ [^\x80-\xff]   [^\\\x80-\xff\n\015] * )*        #     (special normal*)*"
\)                           #                       )"
)    #         special"
[^\\\x80-\xff\n\015] *                         #         normal*"
)*                                  #            )*"
\)                             #                )"
|"
"                                     # ""
[^\\\x80-\xff\n\015"] *                            #   normal"
(:  \\ [^\x80-\xff]  [^\\\x80-\xff\n\015"] * )*        #   ( special normal* )*"
"                                     #        ""
) # "special" comment or quoted string"
[^<>@,;:".\\\[\]\x80-\xff\000-\010\012-\037] *            #  more "normal""
)*"
<"
[\040\t]*                    # Nab whitespace."
(:"
\(                              #  ("
[^\\\x80-\xff\n\015] *                             #     normal*"
(:                                 #       ("
(:  \\ [^\x80-\xff]  |"
\(                            #  ("
[^\\\x80-\xff\n\015] *                            #     normal*"
(:  \\ [^\x80-\xff]   [^\\\x80-\xff\n\015] * )*        #     (special normal*)*"
\)                           #                       )"
)    #         special"
[^\\\x80-\xff\n\015] *                         #         normal*"
)*                                  #            )*"
\)                             #                )"
[\040\t]* )*    # If comment found, allow more spaces."
# <"
(:"
@"
[\040\t]*                    # Nab whitespace."
(:"
\(                              #  ("
[^\\\x80-\xff\n\015] *                             #     normal*"
(:                                 #       ("
(:  \\ [^\x80-\xff]  |"
\(                            #  ("
[^\\\x80-\xff\n\015] *                            #     normal*"
(:  \\ [^\x80-\xff]   [^\\\x80-\xff\n\015] * )*        #     (special normal*)*"
\)                           #                       )"
)    #         special"
[^\\\x80-\xff\n\015] *                         #         normal*"
)*                                  #            )*"
\)                             #                )"
[\040\t]* )*    # If comment found, allow more spaces."
(:"
[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+    # some number of atom characters..."
([^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]) # ..not followed by something that could be part of an atom"
|"
\[                            # ["
(: [^\\\x80-\xff\n\015\[\]] |  \\ [^\x80-\xff]  )*     #    stuff"
\]                           #           ]"
)"
[\040\t]*                    # Nab whitespace."
(:"
\(                              #  ("
[^\\\x80-\xff\n\015] *                             #     normal*"
(:                                 #       ("
(:  \\ [^\x80-\xff]  |"
\(                            #  ("
[^\\\x80-\xff\n\015] *                            #     normal*"
(:  \\ [^\x80-\xff]   [^\\\x80-\xff\n\015] * )*        #     (special normal*)*"
\)                           #                       )"
)    #         special"
[^\\\x80-\xff\n\015] *                         #         normal*"
)*                                  #            )*"
\)                             #                )"
[\040\t]* )*    # If comment found, allow more spaces."
# optional trailing comments"
(:"
\."
[\040\t]*                    # Nab whitespace."
(:"
\(                              #  ("
[^\\\x80-\xff\n\015] *                             #     normal*"
(:                                 #       ("
(:  \\ [^\x80-\xff]  |"
\(                            #  ("
[^\\\x80-\xff\n\015] *                            #     normal*"
(:  \\ [^\x80-\xff]   [^\\\x80-\xff\n\015] * )*        #     (special normal*)*"
\)                           #                       )"
)    #         special"
[^\\\x80-\xff\n\015] *                         #         normal*"
)*                                  #            )*"
\)                             #                )"
[\040\t]* )*    # If comment found, allow more spaces."
(:"
[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+    # some number of atom characters..."
([^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]) # ..not followed by something that could be part of an atom"
|"
\[                            # ["
(: [^\\\x80-\xff\n\015\[\]] |  \\ [^\x80-\xff]  )*     #    stuff"
\]                           #           ]"
)"
[\040\t]*                    # Nab whitespace."
(:"
\(                              #  ("
[^\\\x80-\xff\n\015] *                             #     normal*"
(:                                 #       ("
(:  \\ [^\x80-\xff]  |"
\(                            #  ("
[^\\\x80-\xff\n\015] *                            #     normal*"
(:  \\ [^\x80-\xff]   [^\\\x80-\xff\n\015] * )*        #     (special normal*)*"
\)                           #                       )"
)    #         special"
[^\\\x80-\xff\n\015] *                         #         normal*"
)*                                  #            )*"
\)                             #                )"
[\040\t]* )*    # If comment found, allow more spaces."
# optional trailing comments"
)*"
(: ,"
[\040\t]*                    # Nab whitespace."
(:"
\(                              #  ("
[^\\\x80-\xff\n\015] *                             #     normal*"
(:                                 #       ("
(:  \\ [^\x80-\xff]  |"
\(                            #  ("
[^\\\x80-\xff\n\015] *                            #     normal*"
(:  \\ [^\x80-\xff]   [^\\\x80-\xff\n\015] * )*        #     (special normal*)*"
\)                           #                       )"
)    #         special"
[^\\\x80-\xff\n\015] *                         #         normal*"
)*                                  #            )*"
\)                             #                )"
[\040\t]* )*    # If comment found, allow more spaces."
@"
[\040\t]*                    # Nab whitespace."
(:"
\(                              #  ("
[^\\\x80-\xff\n\015] *                             #     normal*"
(:                                 #       ("
(:  \\ [^\x80-\xff]  |"
\(                            #  ("
[^\\\x80-\xff\n\015] *                            #     normal*"
(:  \\ [^\x80-\xff]   [^\\\x80-\xff\n\015] * )*        #     (special normal*)*"
\)                           #                       )"
)    #         special"
[^\\\x80-\xff\n\015] *                         #         normal*"
)*                                  #            )*"
\)                             #                )"
[\040\t]* )*    # If comment found, allow more spaces."
(:"
[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+    # some number of atom characters..."
([^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]) # ..not followed by something that could be part of an atom"
|"
\[                            # ["
(: [^\\\x80-\xff\n\015\[\]] |  \\ [^\x80-\xff]  )*     #    stuff"
\]                           #           ]"
)"
[\040\t]*                    # Nab whitespace."
(:"
\(                              #  ("
[^\\\x80-\xff\n\015] *                             #     normal*"
(:                                 #       ("
(:  \\ [^\x80-\xff]  |"
\(                            #  ("
[^\\\x80-\xff\n\015] *                            #     normal*"
(:  \\ [^\x80-\xff]   [^\\\x80-\xff\n\015] * )*        #     (special normal*)*"
\)                           #                       )"
)    #         special"
[^\\\x80-\xff\n\015] *                         #         normal*"
)*                                  #            )*"
\)                             #                )"
[\040\t]* )*    # If comment found, allow more spaces."
# optional trailing comments"
(:"
\."
[\040\t]*                    # Nab whitespace."
(:"
\(                              #  ("
[^\\\x80-\xff\n\015] *                             #     normal*"
(:                                 #       ("
(:  \\ [^\x80-\xff]  |"
\(                            #  ("
[^\\\x80-\xff\n\015] *                            #     normal*"
(:  \\ [^\x80-\xff]   [^\\\x80-\xff\n\015] * )*        #     (special normal*)*"
\)                           #                       )"
)    #         special"
[^\\\x80-\xff\n\015] *                         #         normal*"
)*                                  #            )*"
\)                             #                )"
[\040\t]* )*    # If comment found, allow more spaces."
(:"
[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+    # some number of atom characters..."
([^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]) # ..not followed by something that could be part of an atom"
|"
\[                            # ["
(: [^\\\x80-\xff\n\015\[\]] |  \\ [^\x80-\xff]  )*     #    stuff"
\]                           #           ]"
)"
[\040\t]*                    # Nab whitespace."
(:"
\(                              #  ("
[^\\\x80-\xff\n\015] *                             #     normal*"
(:                                 #       ("
(:  \\ [^\x80-\xff]  |"
\(                            #  ("
[^\\\x80-\xff\n\015] *                            #     normal*"
(:  \\ [^\x80-\xff]   [^\\\x80-\xff\n\015] * )*        #     (special normal*)*"
\)                           #                       )"
)    #         special"
[^\\\x80-\xff\n\015] *                         #         normal*"
)*                                  #            )*"
\)                             #                )"
[\040\t]* )*    # If comment found, allow more spaces."
# optional trailing comments"
)*"
)*  # additional domains"
:"
[\040\t]*                    # Nab whitespace."
(:"
\(                              #  ("
[^\\\x80-\xff\n\015] *                             #     normal*"
(:                                 #       ("
(:  \\ [^\x80-\xff]  |"
\(                            #  ("
[^\\\x80-\xff\n\015] *                            #     normal*"
(:  \\ [^\x80-\xff]   [^\\\x80-\xff\n\015] * )*        #     (special normal*)*"
\)                           #                       )"
)    #         special"
[^\\\x80-\xff\n\015] *                         #         normal*"
)*                                  #            )*"
\)                             #                )"
[\040\t]* )*    # If comment found, allow more spaces."
# optional trailing comments"
)?     #       optional route"
(:"
[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+    # some number of atom characters..."
([^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]) # ..not followed by something that could be part of an atom"
# Atom"
|                       #  or"
"                                     # ""
[^\\\x80-\xff\n\015"] *                            #   normal"
(:  \\ [^\x80-\xff]  [^\\\x80-\xff\n\015"] * )*        #   ( special normal* )*"
"                                     #        ""
# Quoted string"
)"
[\040\t]*                    # Nab whitespace."
(:"
\(                              #  ("
[^\\\x80-\xff\n\015] *                             #     normal*"
(:                                 #       ("
(:  \\ [^\x80-\xff]  |"
\(                            #  ("
[^\\\x80-\xff\n\015] *                            #     normal*"
(:  \\ [^\x80-\xff]   [^\\\x80-\xff\n\015] * )*        #     (special normal*)*"
\)                           #                       )"
)    #         special"
[^\\\x80-\xff\n\015] *                         #         normal*"
)*                                  #            )*"
\)                             #                )"
[\040\t]* )*    # If comment found, allow more spaces."
(:"
\."
[\040\t]*                    # Nab whitespace."
(:"
\(                              #  ("
[^\\\x80-\xff\n\015] *                             #     normal*"
(:                                 #       ("
(:  \\ [^\x80-\xff]  |"
\(                            #  ("
[^\\\x80-\xff\n\015] *                            #     normal*"
(:  \\ [^\x80-\xff]   [^\\\x80-\xff\n\015] * )*        #     (special normal*)*"
\)                           #                       )"
)    #         special"
[^\\\x80-\xff\n\015] *                         #         normal*"
)*                                  #            )*"
\)                             #                )"
[\040\t]* )*    # If comment found, allow more spaces."
(:"
[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+    # some number of atom characters..."
([^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]) # ..not followed by something that could be part of an atom"
# Atom"
|                       #  or"
"                                     # ""
[^\\\x80-\xff\n\015"] *                            #   normal"
(:  \\ [^\x80-\xff]  [^\\\x80-\xff\n\015"] * )*        #   ( special normal* )*"
"                                     #        ""
# Quoted string"
)"
[\040\t]*                    # Nab whitespace."
(:"
\(                              #  ("
[^\\\x80-\xff\n\015] *                             #     normal*"
(:                                 #       ("
(:  \\ [^\x80-\xff]  |"
\(                            #  ("
[^\\\x80-\xff\n\015] *                            #     normal*"
(:  \\ [^\x80-\xff]   [^\\\x80-\xff\n\015] * )*        #     (special normal*)*"
\)                           #                       )"
)    #         special"
[^\\\x80-\xff\n\015] *                         #         normal*"
)*                                  #            )*"
\)                             #                )"
[\040\t]* )*    # If comment found, allow more spaces."
# additional words"
)*"
@"
[\040\t]*                    # Nab whitespace."
(:"
\(                              #  ("
[^\\\x80-\xff\n\015] *                             #     normal*"
(:                                 #       ("
(:  \\ [^\x80-\xff]  |"
\(                            #  ("
[^\\\x80-\xff\n\015] *                            #     normal*"
(:  \\ [^\x80-\xff]   [^\\\x80-\xff\n\015] * )*        #     (special normal*)*"
\)                           #                       )"
)    #         special"
[^\\\x80-\xff\n\015] *                         #         normal*"
)*                                  #            )*"
\)                             #                )"
[\040\t]* )*    # If comment found, allow more spaces."
(:"
[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+    # some number of atom characters..."
([^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]) # ..not followed by something that could be part of an atom"
|"
\[                            # ["
(: [^\\\x80-\xff\n\015\[\]] |  \\ [^\x80-\xff]  )*     #    stuff"
\]                           #           ]"
)"
[\040\t]*                    # Nab whitespace."
(:"
\(                              #  ("
[^\\\x80-\xff\n\015] *                             #     normal*"
(:                                 #       ("
(:  \\ [^\x80-\xff]  |"
\(                            #  ("
[^\\\x80-\xff\n\015] *                            #     normal*"
(:  \\ [^\x80-\xff]   [^\\\x80-\xff\n\015] * )*        #     (special normal*)*"
\)                           #                       )"
)    #         special"
[^\\\x80-\xff\n\015] *                         #         normal*"
)*                                  #            )*"
\)                             #                )"
[\040\t]* )*    # If comment found, allow more spaces."
# optional trailing comments"
(:"
\."
[\040\t]*                    # Nab whitespace."
(:"
\(                              #  ("
[^\\\x80-\xff\n\015] *                             #     normal*"
(:                                 #       ("
(:  \\ [^\x80-\xff]  |"
\(                            #  ("
[^\\\x80-\xff\n\015] *                            #     normal*"
(:  \\ [^\x80-\xff]   [^\\\x80-\xff\n\015] * )*        #     (special normal*)*"
\)                           #                       )"
)    #         special"
[^\\\x80-\xff\n\015] *                         #         normal*"
)*                                  #            )*"
\)                             #                )"
[\040\t]* )*    # If comment found, allow more spaces."
(:"
[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+    # some number of atom characters..."
([^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]) # ..not followed by something that could be part of an atom"
|"
\[                            # ["
(: [^\\\x80-\xff\n\015\[\]] |  \\ [^\x80-\xff]  )*     #    stuff"
\]                           #           ]"
)"
[\040\t]*                    # Nab whitespace."
(:"
\(                              #  ("
[^\\\x80-\xff\n\015] *                             #     normal*"
(:                                 #       ("
(:  \\ [^\x80-\xff]  |"
\(                            #  ("
[^\\\x80-\xff\n\015] *                            #     normal*"
(:  \\ [^\x80-\xff]   [^\\\x80-\xff\n\015] * )*        #     (special normal*)*"
\)                           #                       )"
)    #         special"
[^\\\x80-\xff\n\015] *                         #         normal*"
)*                                  #            )*"
\)                             #                )"
[\040\t]* )*    # If comment found, allow more spaces."
# optional trailing comments"
)*"
#       address spec"
>                    #                 >"
# name and address"
)"
/
"Alan Other <user\@dom.ain>"
"<user\@dom.ain>"
"user\@dom.ain"
"\"A. Other\" <user.1234\@dom.ain> (a comment)"
"A. Other <user.1234\@dom.ain> (a comment)"
"\"/s=user/ou=host/o=place/prmd=uu.yy/admd= /c=gb/\"\@x400-re.lay"
"A missing angle <user\@some.where"
"The quick brown fox"

/abc\0def\00pqr\000xyz\0000AB/
"abc\0def\00pqr\000xyz\0000AB"
"abc456 abc\0def\00pqr\000xyz\0000ABCDE"

/abc\x0def\x00pqr\x000xyz\x0000AB/
"abc\x0def\x00pqr\x000xyz\x0000AB"
"abc456 abc\x0def\x00pqr\x000xyz\x0000ABCDE"

/^[\000-\037]/
"\0A"
"\01B"
"\037C"

/\0*/
"\0\0\0\0"

/A\x0<2,3>Z/
"The A\x0\x0Z"
"An A\0\x0\0Z"
"A\0Z"
"A\0\x0\0\x0Z"

/^(cow|)\1(bell)/
"cowcowbell"
"bell"
"cowbell"

/^\s/
"\040abc"
"\x0cabc"
"\nabc"
"\rabc"
"\tabc"
"abc"

/^a	b"
""
"  c/
"abc"

/^(a|)\1*b/
"ab"
"aaaab"
"b"
"acb"

/^(a|)\1+b/
"aab"
"aaaab"
"b"
"ab"

/^(a|)\1?b/
"ab"
"aab"
"b"
"acb"

/^(a|)\1<2>b/
"aaab"
"b"
"ab"
"aab"
"aaaab"

/^(a|)\1<2,3>b/
"aaab"
"aaaab"
"b"
"ab"
"aab"
"aaaaab"

/ab<1,3>bc/
"abbbbc"
"abbbc"
"abbc"
"abc"
"abbbbbc"

/([^.]*)\.([^:]*):[T ]+(.*)/
"track1.title:TBlah blah blah"

/([^.]*)\.([^:]*):[T ]+(.*)/
"track1.title:TBlah blah blah"

/([^.]*)\.([^:]*):[t ]+(.*)/
"track1.title:TBlah blah blah"

/^[W-c]+$/
"WXY_^abc"
"wxy"

/^[W-c]+$/
"WXY_^abc"
"wxy_^ABC"

/^[\x3f-\x5F]+$/
"WXY_^abc"
"wxy_^ABC"

/^abc$/m"
"abc"
"qqq\nabc"
"abc\nzzz"
"qqq\nabc\nzzz"

/^abc$/
"abc"
"qqq\nabc"
"abc\nzzz"
"qqq\nabc\nzzz"

/\Aabc\Z/m"
"abc"
"abc\n "
"qqq\nabc"
"abc\nzzz"
"qqq\nabc\nzzz"
""
/\A(.)*\Z/s"
"abc\ndef"

/\A(.)*\Z/m"
"abc\ndef"

/(:b|::+)/
"b::c"
"c::b"

/[-az]+/
"az-"
"b"

/[az-]+/
"za-"
"b"

/[a\-z]+/
"a-z"
"b"

/[a-z]+/
"abcdxyz"

/[\d-]+/
"12-34"
"aaa"

/[\d-z]+/
"12-34z"
"aaa"

/\x5c/
"\\"

/\x20Z/
"the Zoo"
"Zulu"

/(abc)\1/
"abcabc"
"ABCabc"
"abcABC"

/ab\<3cd/
"ab<3cd"

/ab\<3,cd/
"ab\<3,cd"

/ab\<3,4a>cd/
"ab\<3,4a>cd"

/\<4,5a\>bc/
"\<4,5a\>bc"

/^a.b/
"a\rb"
"a\nb"

/abc$/
"abc"
"abc\n"
"abc\ndef"

/(abc)\0123/
"abc\x53"

/(abc)\0223/
"abc\x93"

/(abc)\0323/
"abc\xd3"

/(abc)\0500/
"abc\x40"
"abc\100"

/(abc)\05000/
"abc\x400"
"abc\x40\x30"
"abc\1000"
"abc\100\x30"
"abc\100\060"
"abc\100\60"

/abc\081/
"abc\081"
"abc\0\x38\x31"

/abc\91/
"abc\091"
"abc\0\x39\x31"

/(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)\12\123/
"abcdefghijkllS"

/(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)\12\123/
"abcdefghijk\12S"

/ab\gdef/
"abgdef"

/a<0>bc/
"bc"

/(a|(bc))<0,0>xyz/
"xyz"

/abc[\10]de/
"abc\010de"

/abc[\1]de/
"abc\1de"

/(abc)[\1]de/
"abc\1de"

/a.b(s)/
"a\nb"

/^([^a])([^\b])([^c]*)([^d]<3,4>)/
"baNOTccccd"
"baNOTcccd"
"baNOTccd"
"bacccd"
"anything"
"b\bc   "
"baccd"

/[^a]/
"Abc"
""
/[^a]/
"Abc "

/[^a]+/
"AAAaAbc"
""
/[^a]+/
"AAAaAbc "

/[^a]+/
"bbb\nccc"
""
/[^k]$/
"abc"
"abk   "
""
/[^k]<2,3>$/
"abc"
"kbc"
"kabc "
"abk"
"akb"
"akk "

/^\d<8,>\@.+[^k]$/
"12345678\@a.b.c.d"
"123456789\@x.y.z"
"12345678\@x.y.uk"
"1234567\@a.b.c.d       "

/(a)\1<8,>/
"aaaaaaaaa"
"aaaaaaaaaa"
"aaaaaaa   "

/[^a]/
"aaaabcd"
"aaAabcd "

/[^a]/
"aaaabcd"
"aaAabcd "

/[^az]/
"aaaabcd"
"aaAabcd "

/[^az]/
"aaaabcd"
"aaAabcd "




/P[^*]TAIRE[^*]<1,6>LL/
"xxxxxxxxxxxPSTAIREISLLxxxxxxxxx"

/P[^*]TAIRE[^*]<1,>LL/
"xxxxxxxxxxxPSTAIREISLLxxxxxxxxx"

/(\.\d\d[1-9]?)\d+/
"1.230003938"
"1.875000282   "
"1.235  "
""
/(\.\d\d((=0)|\d(=\d)))/
"1.230003938      "
"1.875000282"
"1.235 "
""
/ab/
"ab "
""
/\b(foo)\s+(\w+)/
"Food is on the foo table"
""
/foo(.*)bar/
"The food is under the bar in the barn."
""
/foo(.*)bar/  "
"The food is under the bar in the barn."

/(.*)(\d*)/
"I have 2 numbers: 53147"
""
/(.*)(\d+)/
"I have 2 numbers: 53147"
""
/(.*)(\d*)/
"I have 2 numbers: 53147"

/(.*)(\d+)/
"I have 2 numbers: 53147"

/(.*)(\d+)$/
"I have 2 numbers: 53147"

/(.*)(\d+)$/
"I have 2 numbers: 53147"

/(.*)\b(\d+)$/
"I have 2 numbers: 53147"

/(.*\D)(\d+)$/
"I have 2 numbers: 53147"

/^\D*(123)/
"ABC123"
""
/^(\D*)(=\d)(123)/
"ABC445"
"ABC123"
""
/^[W-]46]/
"W46]789 "
"-46]789"
"Wall"
"Zebra"
"42"
"[abcd] "
"]abcd["
""
/^[W-\]46]/
"W46]789 "
"Wall"
"Zebra"
"Xylophone  "
"42"
"[abcd] "
"]abcd["
"\\backslash "
"-46]789"
"well"
""
/\d\d\/\d\d\/\d\d\d\d/
"01/01/2000"

/word (:[a-zA-Z0-9]+ )<0,10>otherword/
"word cat dog elephant mussel cow horse canary baboon snake shark otherword"
"word cat dog elephant mussel cow horse canary baboon snake shark"

/word (:[a-zA-Z0-9]+ )<0,300>otherword/
"word cat dog elephant mussel cow horse canary baboon snake shark the quick brown fox and the lazy dog and several other words getting close to thirty by now I hope"

/^(a)<0,0>/
"bcd"
"abc"
"aab     "

/^(a)<0,1>/
"bcd"
"abc"
"aab  "

/^(a)<0,2>/
"bcd"
"abc"
"aab  "

/^(a)<0,3>/
"bcd"
"abc"
"aab"
"aaa   "

/^(a)<0,>/
"bcd"
"abc"
"aab"
"aaa"
"aaaaaaaa    "

/^(a)<1,1>/
"bcd"
"abc"
"aab  "

/^(a)<1,2>/
"bcd"
"abc"
"aab  "

/^(a)<1,3>/
"bcd"
"abc"
"aab"
"aaa   "

/^(a)<1,>/
"bcd"
"abc"
"aab"
"aaa"
"aaaaaaaa    "

/.*\.gif/
"borfle\nbib.gif\nno"

/.<0,>\.gif/
"borfle\nbib.gif\nno"

/.*\.gif/m"
"borfle\nbib.gif\nno"

/.*\.gif/s"
"borfle\nbib.gif\nno"

/.*\.gif/ms"
"borfle\nbib.gif\nno"
""
/.*$/
"borfle\nbib.gif\nno"

/.*$/m"
"borfle\nbib.gif\nno"

/.*$/s"
"borfle\nbib.gif\nno"

/.*$/ms"
"borfle\nbib.gif\nno"
""
/.*$/
"borfle\nbib.gif\nno\n"

/.*$/m"
"borfle\nbib.gif\nno\n"

/.*$/s"
"borfle\nbib.gif\nno\n"

/.*$/ms"
"borfle\nbib.gif\nno\n"
""
/(.*X|^B)/
"abcde\n1234Xyz"
"BarFoo "
"abcde\nBar  "

/(.*X|^B)/m"
"abcde\n1234Xyz"
"BarFoo "
"abcde\nBar  "

/(.*X|^B)/s"
"abcde\n1234Xyz"
"BarFoo "
"abcde\nBar  "

/(.*X|^B)/ms"
"abcde\n1234Xyz"
"BarFoo "
"abcde\nBar  "

/(s)(.*X|^B)/
"abcde\n1234Xyz"
"BarFoo "
"abcde\nBar  "

/(s:.*X|^B)/
"abcde\n1234Xyz"
"BarFoo "
"abcde\nBar  "

/^.*B/
"abc\nB"
""
/(s)^.*B/
"abc\nB"

/(m)^.*B/
"abc\nB"
""
/(ms)^.*B/
"abc\nB"

/(ms)^B/
"abc\nB"

/(s)B$/
"B\n"

/^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]/
"123456654321"
""
/^\d\d\d\d\d\d\d\d\d\d\d\d/
"123456654321 "

/^[\d][\d][\d][\d][\d][\d][\d][\d][\d][\d][\d][\d]/
"123456654321"
""
/^[abc]<12>/
"abcabcabcabc"
""
/^[a-c]<12>/
"abcabcabcabc"
""
/^(a|b|c)<12>/
"abcabcabcabc "

/^[abcdefghijklmnopqrstuvwxy0123456789]/
"n"
"z "

/abcde<0,0>/
"abcd"
"abce  "

/ab[cd]<0,0>e/
"abe"
"abcde "
""
/ab(c)<0,0>d/
"abd"
"abcd   "

/a(b*)/
"a"
"ab"
"abbbb"
"bbbbb    "
""
/ab\d<0>e/
"abe"
"ab1e   "
""
/"([^\\"]+|\\.)*"/
"the \"quick\" brown fox"
"\"the \\\"quick\\\" brown fox\" "

/.*/g+"
"abc"
""
/\b/g+"
"abc "

/\b/+g"
"abc "

//
"abc"

/a[^a]b/
"acb"
"a\nb"
""
/a.b/
"acb"
"a\nb   "
""
/a[^a]b/s"
"acb"
"a\nb  "
""
/a.b/s"
"acb"
"a\nb  "

/^(b+|a)<1,2>c/
"bac"
"bbac"
"bbbac"
"bbbbac"
"bbbbbac "

/^(b+|a)<1,2>c/
"bac"
"bbac"
"bbbac"
"bbbbac"
"bbbbbac "
""
/(\A)x/m"
"x\nb\n"
"a\bx\n  "
""
/\x0\<ab>/
"\0<ab> "

/(A|B)*CD/
"CD "
""
/(A|B)*CD/
"CD "

/{(AB)*}\1/
"ABABAB"

/{(AB)*}\1/
"ABABAB"
""
/\(/
"doesn't matter"

/(x)\2/
"doesn't matter"

/((a<0,5>)<0,5>)<0,5>[c]/
"aaaaaaaaaac"
"aaaaaaaaaa"

/((a<0,5>)<0,5>)*[c]/
"aaaaaaaaaac"
"aaaaaaaaaa"

/(\b)*a/
"a"

/(a)*b/
"ab"

/(a|)*b/
"ab"
"b"
"x"

/^(:(a)|(b))*\1\2$/
"abab"

/abc[^x]def/
"abcxabcydef"

/^(a|\1x)*$/
"aax"
"aaxa"

//
"@<['']>"

/^(:(a)|(b))*$/
"ab"

/[\0]/
"a"
"\0"

/[\1]/
"a"
"\1"

/\10/
"doesn't matter"

/\10/
"a"

/a\)b/
"ab"

/[x]/
"doesn't matter"

/[\]]/
"doesn't matter"

/[\x]/
"x"
"\0"

/((a)*)*/
"a"

/{a}\1/
"a"

/{a}\1/
"a"

/a(i)a(-i)a/
"aaa"
"aAa"
"aAA"

/a(i)a(-i)a(i)a(-i)a/
"aaaaa"
"aAaAa"
"AaAaA"
"aAAAa"
"AaaaA"
"AAAAA"
"aaAAA"
"AAaaa"

/\x/
"a"
"X"
"\0"

/[a-c-e]/
"a"
"b"
"d"
"-"

/[b-\d]/
"b"
"c"
"d"
"-"
"1"

/[\d-f]/
"d"
"e"
"f"
"-"
"1"

/[/
"doesn't matter"

/]/
"]"
"a"

/[x]/
"doesn't matter"

/[\-a-c]/
"-"
"a"
"b"
"d"

/[a-c\-]/
"-"
"a"
"b"
"d"

/[\-]/
"a"
"-"

/[\-\-]/
"a"
"-"

/[\-\-\-]/
"a"
"-"

/[\-\-b]/
"-"
"a"
"c"

/[b\-\-]/
"doesn't matter"

/a\</
"a<"

/a\<>/
"a<>"

/a\<3/
"a<3"

/a\<3,/
"a<3,"

/a<3,3>/
"a<3,3>"
"a<3,3>"
"aaa"

/a<3,3>/
"a<3,3>"
"a<3,3>"
"aaa"

/a<3,>/
"a<3,>"
"a<3, >"
"aaa"

/a<3,>/
"a<3,>"
"a<3,>"
"aaa"

/\x x/
"\0 x"
"\0x"

/\x x/
"\0 x"
"\0x"

/\x 3/
"\0003"
"\000 3"
"x3"
"x 3"

/\x 3/
"\0003"
"\000 3"
"x3"
"x 3"

/^a<1>$/
"a"
"a< 1>"
"a<1>"

/^a<1>$/
"a"
"a< 1>"
"a<1>"

/\<\>/
"<>"
"a"

/\<1\>/
"doesn't matter"

/\*/
"doesn't matter"

/\|/
"x"

/\0000/
"\0000"

/a\)b/
"ab"

/a(i)b/
"ab"
"aB"
"Ab"

/a(i=a)/
"doesn't matter"

/a=a\)<100>a/
"aa"
"xa"
"ax"

/a(=a)<30>a/
"aa"
"ax"
"xa"

/a<30>a/
"aa"
"ax"
"xa"

/a(:)<30>a/
"aa"
"ax"

/a=a*a/
"aa"
"ax"
"xa"

/a(=a)*a/
"aa"
"ax"
"xa"

/a*a/
"aa"
"ax"
"xa"

/a(:)*a/
"aa"
"ax"
"xa"

/x=a*a/
"aa"
"xa"
"ax"

/a=(a)*\1/
"aa"

/a=(a)*\1/
"aa"

/(=(a)\1)*aa/
"aa"

/^((a|b)<2,5>)<2>$/
"aaaaabbbbb"

/^(b*|ba)<1,2>bc/
"babc"
"bbabc"
"bababc"
"bababbc"
"babababc"

/^a<4,5>(:c|a)c$/
"aaaaac"
"aaaaaac"

/^(a|)<4,5>(:c|a)c$/
"aaaaac"
"aaaaaac"

/(m:^).abc$/
"eeexabc"
"eee\nxabc"

/(m:^)abc/
"abc"
"\nabc"


/^abc/
"abc"
"\nabc"

/\Aabc/
"abc"
"\nabc"

/barfoo/
"foo"
"catfood"
"arfootle"
"rfoosh"
"barfoo"
"towbarfoo"

/\w<3>barfoo/
"catfood"
"foo"
"barfoo"
"towbarfoo"

/=(foo)abar/
"fooabar"
"bar"
"foobbar"
""
/\Aabc\z/
"abc"
"abc\n   "
"qqq\nabc"
"abc\nzzz"
"qqq\nabc\nzzz"
".*/)foo""
"/this/is/a/very/long/line/in/deed/with/very/many/slashes/in/it/you/see/
".*/)foo""
"/this/is/a/very/long/line/in/deed/with/very/many/slashes/in/and/foo"

/(\.\d\d[1-9]?)\d+/
"1.230003938"
"1.875000282"
"1.235 "

/^(\w+|\s+)*$/
"now is the time for all good men to come to the aid of the party"
"this is not a line with only words and spaces!"
""
/(\d+)(\w)/
"12345a"
"12345+ "

/(\d+)(\w)/
"12345a"
"12345+ "

/a+b/
"aaab"

/(a+)b/
"aaab"

/(a+)b/
"aaab"

/b+/
"aaabbbccc"

/(a+|b+|c*c)/
"aaabbbbccccd"

/([^]+)|\([^]*\))+/
"((abc(ade)ufhx"
""
/\(([^]+)|\([^]+\))+\)/
"(abc)"
"(abc(def)xyz)"
"((aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa   "

/a(-i)b/
"ab"
"Ab"
"aB"
"AB"
""

/(a (x)b c)d e/
"a bcd e"
"a b cd e"
"abcd e   "
"a bcde "
""

/(a b(x)c d (-x)e f)/
"a bcde f"
"abcdef  "

/(a(i)b)c/
"abc"
"aBc"
"abC"
"aBC  "
"Abc"
"ABc"
"ABC"
"AbC"
""

/a(i:b)c/
"abc"
"aBc"
"ABC"
"abC"
"aBC"
""

/a(i:b)*c/
"aBc"
"aBBc"
"aBC"
"aBBC"
""
/a(=b(i)c)\w\wd/
"abcd"
"abCd"
"aBCd"
"abcD     "
""

/(s-i:more.*than).*million/
"more than million"
"more than MILLION"
"more \n than Million "
"MORE THAN MILLION    "
"more \n than \n million "

/(:(s-i)more.*than).*million/
"more than million"
"more than MILLION"
"more \n than Million "
"MORE THAN MILLION    "
"more \n than \n million "
""
/(a(i)b+)+c/ "
"abc"
"aBbc"
"aBBc "
"Abc"
"abAb    "
"abbC "
""
/(=a(i)b)\w\wc/
"abc"
"aBc"
"Ab "
"abC"
"aBC     "
""
/=a(i)b(\w\w)c/
"abxxc"
"aBxxc"
"Abxxc"
"ABxxc"
"abxxC      "

/(:(a)|b)((1)A|B)/
"aA"
"bB"
"aB"
"bA    "

/^(a)?((1)a|b)+$/
"aa"
"b"
"bb  "
"ab   "

/^((=abc)\w<3>:|\d\d)$/
"abc:"
"12"
"123"
"xyz    "

/^((abc)\d\d|\w<3>:)$/
"abc:"
"12"
"123"
"xyz    "
""
/(=foobar|cat)/
"foobar"
"cat"
"fcat"
"focat   "
"foocat  "

/(foocat|bar)/
"foobar"
"cat"
"fcat"
"focat   "
"foocat  "

/( \( )? [^3]+ ((1) \) |x) /
"abcd"
"(abcd)"
"the quick (abcd) fox"
"(abcd   "

/( \( )? [^e]+ ((1) \) ) /
"abcd"
"(abcd)"
"the quick (abcd) fox"
"(abcd   "

/^((2)a|(1)(2))+$/
"12"
"12a"
"12aa"
"1234    "

/((i)blah)\s+\1/
"blah blah"
"BLAH BLAH"
"Blah Blah"
"blaH blaH"
"blah BLAH"
"Blah blah      "
"blaH blah "

/((i)blah)\s+(i:\1)/
"blah blah"
"BLAH BLAH"
"Blah Blah"
"blaH blaH"
"blah BLAH"
"Blah blah      "
"blaH blah "

/a*/
"a"
"aa"
"aaaa"
""

/(abc)+/
"abc"
"abcabc"
"abcabcabc"
"xyz      "

/([a]*)*/
"a"
"aaaaa "
""
/([ab]*)*/
"a"
"b"
"ababab"
"aaaabcde"
"bbbb    "
""
/([^a]*)*/
"b"
"bbbb"
"aaa   "
""
/([^ab]*)*/
"cccc"
"abab  "
""
/([a]*)*/
"a"
"aaaa "
""
/([ab]*)*/
"a"
"b"
"abab"
"baba   "
""
/([^a]*)*/
"b"
"bbbb"
"aaa   "
""
/([^ab]*)*/
"c"
"cccc"
"baba   "
""
/a*/
"a"
"aaabcde "
""
/(a*)*/
"aaaaa"
"aabbaa "
""
/(a*)*/
"aaaaa"
"aabbaa "

/((=[^a-z]+[a-z])  \d<2>-[a-z]<3>-\d<2>  |  \d<2>-\d<2>-\d<2> ) /
"12-sep-98"
"12-09-98"
"sep-12-98"
""
/=(foo)bar\1/
"foobarfoo"
"foobarfootling "
"foobar"
"barfoo   "

/(saturday|sunday)/
"saturday"
"sunday"
"Saturday"
"Sunday"
"SATURDAY"
"SUNDAY"
"SunDay"
""
/(a(i)bc|BB)x/
"abcx"
"aBCx"
"bbx"
"BBx"
"abcX"
"aBCX"
"bbX"
"BBX               "

/^([ab](i)[cd]|[ef])/
"ac"
"aC"
"bD"
"elephant"
"Europe "
"frog"
"France"
"Africa     "

/^(ab|a(i)[b-c](m-i)d|x(i)y|z)/
"ab"
"aBd"
"xy"
"xY"
"zebra"
"Zambesi"
"aCD  "
"XY  "

/=foo\n^bar/m"
"foo\nbar"
"bar"
"baz\nbar   "

/=!foobarbaz/
"barbaz"
"barbarbaz "
"koobarbaz "
"baz"
"foobarbaz "

/^({a}\1?)<4>$/
"a"
"aa"
"aaa"
"aaaa"
"aaaaa"
"aaaaaa"
"aaaaaaa"
"aaaaaaaa"
"aaaaaaaaa"
"aaaaaaaaaa"
"aaaaaaaaaaa"
"aaaaaaaaaaaa"
"aaaaaaaaaaaaa"
"aaaaaaaaaaaaaa"
"aaaaaaaaaaaaaaa"
"aaaaaaaaaaaaaaaa               "

/^{{({a}\1?)(a\1?)}(a\2?)}(a\3?)$/
"a"
"aa"
"aaa"
"aaaa"
"aaaaa"
"aaaaaa"
"aaaaaaa"
"aaaaaaaa"
"aaaaaaaaa"
"aaaaaaaaaa"
"aaaaaaaaaaa"
"aaaaaaaaaaaa"
"aaaaaaaaaaaaa"
"aaaaaaaaaaaaaa"
"aaaaaaaaaaaaaaa"
"aaaaaaaaaaaaaaaa               "

/abc/
"abc"
"xabcy"
"ababc"
"xbc"
"axc"
"abx"

/ab*c/
"abc"

/ab*bc/
"abc"
"abbc"
"abbbbc"

/.<1>/
"abbbbc"

/.<3,4>/
"abbbbc"

/ab<0,>bc/
"abbbbc"

/ab+bc/
"abbc"
"abc"
"abq"

/ab<1,>bc/

/ab+bc/
"abbbbc"

/ab<1,>bc/
"abbbbc"

/ab<1,3>bc/
"abbbbc"

/ab<3,4>bc/
"abbbbc"

/ab<4,5>bc/
"abq"
"abbbbc"

/ab?bc/
"abbc"
"abc"

/ab<0,1>bc/
"abc"

/ab?bc/

/ab?c/
"abc"

/ab<0,1>c/
"abc"

/^abc$/
"abc"
"abbbbc"
"abcc"

/^abc/
"abcc"

/^abc$/

/abc$/
"aabc"
"aabc"
"aabcd"

/^/
"abc"

/$/
"abc"

/a.c/
"abc"
"axc"

/a.*c/
"axyzc"

/a[bc]d/
"abd"
"axyzd"
"abc"

/a[b-d]e/
"ace"

/a[b-d]/
"aac"

/a[-b]/
"a-"

/a[b-]/
"a-"

/a]/
"a]"

/a[]]b/
"a]b"

/a[^bc]d/
"aed"
"abd"
"abd"

/a[^-b]c/
"adc"

/a[^]b]c/
"adc"
"a-c"
"a]c"

/\ba\b/
"a-"
"-a"
"-a-"

/\by\b/
"xy"
"yz"
"xyz"

/\ba\b/
"a-"
"-a"
"-a-"

/\by\b/
"xy"

/\by\b/
"yz"

/\by\b/
"xyz"

/\w/
"a"

/\W/
"-"
"-"
"a"

/a\sb/
"a b"

/a\Sb/
"a-b"
"a-b"
"a b"

/\d/
"1"

/\D/
"-"
"-"
"1"

/[\w]/
"a"

/[\W]/
"-"
"-"
"a"

/a[\s]b/
"a b"

/a[\S]b/
"a-b"
"a-b"
"a b"

/[\d]/
"1"

/[\D]/
"-"
"-"
"1"

/(ab|cd)/
"abc"
"abcd"

/ef/
"def"

/$b/

/a\(b/
"a(b"

/a\(*b/
"ab"
"a((b"

/a\\b/
"a\b"

/((a))/
"abc"

/(a)b(c)/
"abc"

/a+b+c/
"aabbabc"

/a<1,>b<1,>c/
"aabbabc"

/a.+c/
"abcabc"

/(a+|b)*/
"ab"

/(a+|b)<0,>/
"ab"

/(a+|b)+/
"ab"

/(a+|b)<1,>/
"ab"

/(a+|b)?/
"ab"

/(a+|b)<0,1>/
"ab"

/[^ab]*/
"cde"

/abc/
"b"
""

/a*/
""

/([abc])*d/
"abbbcd"

/([abc])*bcd/
"abcd"

/(a|b|c|d|e)/
"e"

/(a|b|c|d|e)f/
"ef"

/abcd*efg/
"abcdefg"

/ab*/
"xabyabbbz"
"xayabbbz"

/(ab|cd)e/
"abcde"

/[abhgefdc]ij/
"hij"

/^(ab|cd)e/

/(abc|s)ef/
"abcdef"

/(a|b)c*d/
"abcd"

/(ab|ab*)bc/
"abc"

/a([bc]*)c*/
"abc"

/a([bc]*)(c*d)/
"abcd"

/a([bc]+)(c*d)/
"abcd"

/a([bc]*)(c+d)/
"abcd"

/a[bcd]*dcdcde/
"adcdcde"

/a[bcd]+dcdcde/
"abcde"
"adcdcde"

/(ab|a)b*c/
"abc"

/((a)(b)c)(d)/
"abcd"

/[a-zA-Z_][a-zA-Z0-9_]*/
"alpha"

/^(a(bc+|b[eh])g|.h)$/
"abh"

/((Z)+|A)*/
"ZABCDEFG"

/(Z|A)*/
"ZABCDEFG"

/(Z()|A)*/
"ZABCDEFG"

/((Z)+|A)*/
"ZABCDEFG"

/(\+|A)*/
"ZABCDEFG"

/a*/
"abbab"

/^[a-\d]/
"abcde"
"-things"
"0digit"
"bcdef    "

/^[\d-a]/
"abcde"
"-things"
"0digit"
"bcdef"

/(=abc).*(=def)/
"abcdef"
"abcxdef"
"abcxdefxdef"

/(=abc).*(=def)/
"abcdef"
"abcxdef"
"abcxdefxdef"

/(=abc).*(=def)/
"abcdef"
"abcxdef"
"abcxdefxdef"

