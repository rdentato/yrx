.\" @(#)gema.1
.\" $Id: gema.1,v 1.6 2003/12/28 02:18:03 dngray Exp $
.TH GEMA 1 "26 Dec 2003" "version 1.4" " "
.SH NAME
gema \- general purpose macro processor
.SH SYNOPSIS
\fBgema\fP \fIoptions\fP... [ \fIinput_file\fP [ \fIoutput_file\fP ]]
.LP
\fBgema\fP \fIoptions\fP... \fB\-out\fP \fIoutput_file\fP \fIinput_file\fP...
.LP
\fBgema\fP \fIoptions\fP... \fB\-odir\fP \fIoutput_directory\fP
[\fB\-otyp\fP \fIoutput_suffix\fP]
\fIinput_file\fP...
.LP
Where \fIoptions\fP is:
.br
\fB\-f\fP \fIpattern_file\fP | [\fB\-p\fP] '\fIpatterns\fP' |
.BR \-b " | " \-i " | " \-k " | "
.BR \-line " | " \-match " | "
.BR \-t " | " \-w " | "
\fB\-idchars \fP\fIcharset\fP |
\fB\-filechars \fP\fIcharset\fP |
\fB\-literal \fP\fIcharset\fP |
.BR \-ml " | "
.BR \-trace " | "
\fB\-arglen \fP\fInum\fP
.de QX
"\\fB\\$1\\fP"\\$2
..
.SH DESCRIPTION
.B gema
is a general purpose text processing utility based on the concept of
pattern matching.  In general, it reads an input file and copies it to
an output file, while performing certain transformations to the data as
specified by a set of patterns defined by the user.  It can be used to
do the sorts of things that are done by Unix utilities such as
.BR cpp ,
.BR grep ,
.BR sed ,
.BR awk ,
or
.BR strings .
It can be used as a macro processor, but it is much more general than
.BR cpp " or " m4
because it does not impose any particular syntax for what a macro call
looks like.  Unlike utilities like
.BR sed " or " awk ,
.B gema
can deal with patterns that span multiple lines and with nested constructs.
It is also distinguished by being able to use multiple sets of rules to
be used in different contexts.
.LP
This
.B man
page provides a tutorial introduction and a brief reference summary.
See the user manual for a more detailed specification.
.LP
If no file names are given on the command line, the program reads from
standard input and writes to standard output.  With two file names
provided, it reads from the first and writes to the second.  If the
output file previously existed, the old file is saved with a
.QX .bak
suffix.  The input file and output file may be the same, in which case
the program actually reads from the backup file.
With the
.B \-out
option, it will write to the designated file, concatenating the results
of reading from any number of input files, which may be specified by wild
cards.  With the
.B \-odir
option, it reads any number of input files, creating a corresponding
output file for each in the designated output directory, with the output
file suffix optionally specified by the
.B \-otyp
option.
.LP
.ne 6
.SH "TUTORIAL EXAMPLES"
For a simple example, consider first the following command line:
.br
\ \ \ \fBgema 'Abram=Abraham;Sarai=Sarah' old.text new.text\fP
.br
This copies file "old.text" to "new.text", replacing each occurrence of
the string "Abram" with the string "Abraham" and replacing "Sarai" with
"Sarah".  The first command line argument consists of two transformation
rules separated by '\fB;\fP'.  Each rule consists of a
.I template
followed by '\fB=\fP' and an
.IR action .
Any text that matches a template is replaced by the result of the
corresponding action.  (Here the action is just a literal replacement
string, but it is called an
.I action
instead of a
.I replacement
because it is more general than that.)
The presence of the equal sign serves to distinguish a pattern argument
from a file name.  Note that pattern arguments will usually need to be
enclosed in single quotes on Unix (as shown in the example), or double
quotes on MS-DOS or Windows.
.LP
Patterns can also be defined in one or more files loaded with the
.B \-f
option.  In a pattern file, new lines separate rules, blank lines are
ignored, and a '\fB!\fP' causes the rest of the line to be ignored as a
comment.
The following characters have special meaning in patterns:
.br
\ \ \ \fB: * ? # / < > \\ ^ = $ @ { } ; !\fP Space NewLine
.LP
Usually when doing string replacement we need to be a little more careful.
For example, suppose we want to replace the variable name "x" with the
name "horizontal".  We don't want to replace instances of "x" that appear
as parts of words, only those that are a word by themselves.
This can easily be done like this:
.br
\ \ \ \fBgema \-t 'x=horizontal'\fP ...
.br
where the
.B \-t
option (token mode) requires all identifiers in templates to match a
complete identifier in the input data.
If you don't want this behavior everywhere, it can instead be specified
locally in the template like this:
.br
\ \ \ \fBgema '\\Ix\\I=horizontal'\fP ...
.br
Here the notation "\fB\\I\fP" denotes an identifier delimiter; it
matches an empty string but only if one of the adjacent characters can
not be part of an identifier.  There are a number of other such
operators listed in the reference section below.  Another that is
particularly useful is "\fB\\W\fP", which says that any number of
whitespace characters will be accepted and skipped over if they appear
at that point.  Thus a template like "\fBx\\W+\\Wy\fP" will match regardless
of whether the input text contains optional spaces.
The
.B \-w
option may be used to ignore spaces everywhere (except within identifiers
or numbers).
.LP
A template such as "\fBfirst\ down\fP" will not only match these two
words separated by a space, it will also match if they are separated by
multiple spaces or even by a newline.  This is because the space
character actually has special meaning, which is to match one or more
whitespace characters.  In the less likely event that you really want to
match exactly one space character, you can use "\fB\\\ \fP" or "\fB\\s\fP".
.LP
Templates can also have
.I arguments
-- i.e. portions which match variable text.  There are in fact several
different kinds of arguments supported.  The first kind of argument is
the
.I "wild card"
characters "\fB*\fP", which matches any number of characters (up to a
limit that can be adjusted by the
.B \-arglen
option), and
"\fB?\fP", which matches any one character.  For example, consider the C
macro definition:
.br
\ \ \ \fB#define frob(p,m) do(Frob,p[m])\fP
.br
A first approximation to doing this with
.B gema
is to use a rule like this:
.QX \\\\Ifrob\\\\W(*,*)=do(Frob,*[*])
Here the asterisks in the template match any text up to the delimiting
comma or
parenthesis, and the same text is substituted where the asterisks appear
in the action.  Note though that in
.BR gema ,
the comma and parentheses do not have any special meaning; a template
may delimit the arguments with whatever characters you want.
There may be as many as 20 arguments, and the "\fB*\fP" or "\fB?\fP"
in the action will be substituted in the same order as in the template.
In cases where the arguments need to be used in some different order or
an argument needs to be used more than once, a different notation may be
used that designates the arguments by number.  For example:
.br
\ \ \ Rule:  \fBADD * TO *.=$2 \\:\\= $2 + $1\\;\fP
.br
\ \ \ Input: \fBADD ITEM TO SUM.\fP
.br
\ \ \ Output: \fBSUM := SUM + ITEM;\fP
.br
Note that some of the characters are escaped so that they will be
treated as literals.  A backslash preceding a special character always
means that the character is to be taken literally, so it won't hurt to
escape all special character literals if you aren't sure which ones have
special meaning.
(If there are more than nine arguments, the number needs to be enclosed in
braces, like: "\fB${10}\fP")
.LP
One problem to watch out for with "\fB*\fP" arguments is that since
.B gema
allows patterns to span line boundaries, the argument may read many
lines ahead, gobbling up much more text than intended.  In cases where
you want to match only on a single line, the operator "\fB\\L\fP" can be
used in a template to specify that the following arguments will not be
allowed to match on a newline character.  This mode may also be selected
globally with the command line option
.BR \-line .
.LP
When a template is to match an entire line, the first inclination might be to
write a template such as:
.QX "\\\\nCommand *\\\\n"
where
.QX \\\\n
designates the new line character.
But there are two problems with this:  it won't match on the first line
of the file (because there isn't a preceding new line) and it won't
match on lines where the preceding new line has already been read as
part of the match for the previous line.  Both of these are solved by
using
.QX \\\\N
which matches if it is at the beginning or end of a line, but doesn't
actually read the new line character.  In an action,
.QX \\\\N
outputs a new line character if the output stream is not already at the
beginning of a line.
.LP
Another way to further constrain argument matching is to use the next
kind of argument, which is called a
.IR "predefined recognizer domain" .
(We'll see user-defined domains later.)  For example, in a template the
string "\fB<D>\fP" designates an argument that will match one or more
digits.  Similarly,
"\fB<L>\fP" matches one or more letters,
"\fB<I>\fP" matches an identifier (letters, digits, and underscore),
and "\fB<N>\fP" matches a number (digits with optional sign and decimal
point).  Other kinds are listed in the reference section below.
With a lower case letter, the argument becomes optional.  Thus,
"\fB<d>\fP" matches zero or more digits.  Preceding the letter with a
minus sign inverts the test, so that, for example, "\fB<\-D>\fP" matches
one or more characters that are
.I not
digits.  The letter may be followed by a number to limit how many
characters are matched.  For example, "\fB<D3>\fP" matches exactly three
digits and "\fB<d3>\fP" will match from zero up to a maximum of three digits.
A
.I universal
argument such as "\fB<U10>\fP" matches exactly 10 characters of any
kind; this may be useful for splitting an input record into fixed-length
fields.  Note that "\fB<U1>\fP" is equivalent to "\fB?\fP".
(For these arguments, the action must access the value using
"\fB$\fP" instead of repeating the argument designator.  That short cut
is only supported for arguments designated by a single character.)
.LP
An even more general way of specifying the set of characters to be
accepted is to use a
.IR "regular expression" .
A regular expression argument is designated by slashes before and after.
For example, the template "\fBc/[ad]+/r\fP" will match input text "cadar"
with "\fB$1\fP" having the value "ada".  Note that between the slashes,
the special characters have the meaning defined by the usual regular
expression syntax, not their meaning elsewhere in templates.
.LP
The last kind of argument is a
.IR "recursive argument" .
To show the need for this, first consider this example that is
trying to convert Lisp s-expressions to function call notation:
.br
\ \ \ Rule: \fB(* * *)=*(*,*)\fP
.br
\ \ \ Input: \fB(fn xyz 34)\fP
.br
\ \ \ Output: \fBfn(xyz,34)\fP
.br
So far, so good, but look what happens here:
.br
\ \ \ Input: \fB(fn (g a b) z)\fP
.br
\ \ \ Output: \fBfn((g,a b)\fP
.br
What is needed is a way to properly associate matching nested
parentheses and to translate nested constructs.  Both of these are done
by simply modifying the rule like this:
.br
\ \ \ Rule: \fB(# # #)=#(#,#)\fP
.br
\ \ \ Input: \fB(fn (g a b) z)\fP
.br
\ \ \ Output: \fBfn(g(a,b),z)\fP
.br
The
.QX #
designates a
.IR "recursive argument" ,
which means that the argument value is
the result of translating input text until reaching the terminator
character(s) following it.  The space following "g" does not terminate
the outer-level argument because it is read as part of the inner-level
template match.  Similarly, the inner "(" is read by the inner match
which also reads the matching inner ")".
.LP
Actions can also perform a wide variety of activities by using the large
set of built-in functions that are available.  A function call is
designated by
.QX @
followed by the name of the function, followed by any arguments enclosed
in curly braces and separated by semicolons.  The "functions" section
below lists all of the functions that are available.
For example, you can define a default rule like this:
.QX "\\\\N.*\\\\N=@err{@file line @line\\\\: Unrecognized\\\\: $1}"
The
.B err
function writes its argument to the error output stream.  The
.B file
and
.B line
functions (which have no arguments) return the name and line number of
the input file.
.LP
.B gema
supports defining multiple sets of rules, each of which is called a
.IR domain.
By default, rules are defined in the default domain, which is also the
one used to translate the input file.  Alternate domains are created by
prefixing a rule with a domain name followed by
.QX : .
The domain name applies until the end of the line.
The name of the default domain is the empty string, so a rule line
beginning with a colon is the same as one without any colon.
Alternate domains are used for several purposes, including
defining new kinds of arguments for use in templates, defining new
functions for use in actions, and for translations that require
different rules for various contexts in the input data.
.LP
To illustrate using an alternate domain as a new argument type, suppose
we want a template argument that will match on either "yes" or "no", so
that we can write a rule like:
.br
.B "   done\\\\? <yesno>=Finished \\\\= $1"
.br
All that is needed is to define the following:
.br
.B "   yesno:yes=yes@end;no=no@end;=@fail"
.br
This says that if you see "yes" or "no", output it to the argument value and
then return, and if anything is seen that doesn't match either of those,
then the argument match fails.
Note that the last rule has an empty
template; this matches as a last resort if no other template in the
domain can be matched.  Since it doesn't advance the input stream, this
makes sense only if the action is to exit.
Note that domain names should have at least two letters in order to not
conflict with predefined recognizers.
.LP
Domain names can also be used as functions of one argument, which means
that the function returns the result of translating the argument value
with the patterns of the domain.  This is typically used in a two-step
translation process where the first pattern match is used to split the
input into fields, and then other domains are used to process individual
fields.  Remember that the default domain has an empty name, so
"\fB@{\fP\fIarg\fP\fB}\fP" means to translate the argument with the
default domain.
.LP
For an example of the use of alternate domains for different contexts,
suppose that we are doing name substitution in C source code and we
don't want to make
any changes inside of character strings.  We could add a rule
.QX """*""=""*"""
to match on string constants and pass them through.  However,
string constants can contain
.QX "\\\\"""
and we don't want the argument to be terminated by that quote.  To handle
this, we can use a separate domain for processing the contents of a string.
Then the rule becomes
.QX """<sbody>""=""$1"""
and we add a rule:
.QX "sbody:\\\\\\\\""=\\\\\\\\"""
.LP
.ne 6
.SH OPTIONS
.LP
.TP
.BI \-f " pattern_file"
Reads pattern definitions from a file.
.TP
.BI \-p " patterns"
Patterns defined directly as a command line argument.  The
.B \-p
can usually be omitted since an argument containing
.QX =
or beginning with
.QX @
is automatically recognized as a pattern argument.
Any number of 
.B \-f
and/or
.B \-p
options may be given.
.TP
.BI \-in " file"
Explicitly specifies the input file pathname.  If the file name is
.QX -
then standard input is used.  Usually the
.B \-in
is not necessary since the first file name on the command line is
understood to be the input file.
.TP
.BI \-out " file"
Specifies the pathname of the output file.  If the name is
.QX -
then standard output is used.  After an explicit
.B \-out
option has been used, the remainder of the command line can have any
number of input file names (without
.BR \-in )
which will be read in sequence, with the
concatenated result going to the single output file.
For example, a command such as the following can be used to do a 
.BR grep -like
search of a group of files:
.br
\ \ \fBgema -match -p 'Copyright *\\n=@file\\: $0' -out - *.c\fP
.br
(The special notation
.QX $0
copies all of the matched text into the output.)
.TP
.BI \-odir " directory"
Specifies the output directory.  For each input file that follows, a
corresponding output file will be written in the designated directory.
.TP
.BI \-otyp " suffix"
When used with the
.B \-odir
option, this specifies that each output file will have the designated
suffix replacing the suffix of the input file.
For example, given the command line:
.br
\ \ \ \fBgema \-f patterns \-odir /stuff \-otyp .list *.text\fP
.br
then if the current directory contains a file named
.QX foo.text ,
it will be translated to an output file named
.QX /stuff/foo.list .
.TP
.BI \-backup " suffix"
The argument will be used as the backup file suffix in place of the default
.QX .bak .
.TP
.BI \-nobackup
Output files will be overwritten instead of saving the old file as a
backup file.
.TP
.B \-line
Places the program in line mode, which means that all pattern matching
is limited to single lines.  Arguments and template operators will never
cross a line boundary except where the template explicitly specifies
so with
.QX \\\\n .
.TP
.B \-b
Binary.  With this option, all input and output files are opened in
binary mode instead of text mode.  This makes no difference on most Unix
systems, but on Windows it changes the meaning of the new line character and
doesn't treat Control-Z as the end of the file.
.TP
.B \-k
Keep going.  With this option, the program will try to continue
execution after certain errors that would normally cause it to abort.
This may be useful when you want to see everything that is wrong before
starting to fix the errors.  Errors will still cause a non-zero exit
status despite this option.
.TP
.B \-match
Matches only mode.  Input text that doesn't match any template will be
discarded instead of being copied to the output.  This would be used
when you want to extract selected information (like with
.BR grep )
instead of doing a translation.
This option applies only to the default domain.
Another way to discard otherwise unmatched text is with the default rule
.QX ?=
while the rule
.QX ?=?
can be used to explicitly copy.
.TP
.B \-i
Case insensitive mode.  All letters in templates will be matched without
regard to distinctions of upper case or lower case.  This also makes the
names of domains and built-in functions case insensitive.
.TP
.B \-w
Whitespace insensitive mode.  Space and tab characters in rules will be
ignored except where they separate identifiers.
Template matching will ignore whitespace characters in the
input data as though templates had an implicit
.QX \\\\W
everywhere except within identifiers.
Templates can use
.QX \\\\J
to indicate where space is
.I not
allowed.
.TP
.B \-t
Token mode.  All identifiers appearing in templates will match only
against a complete identifier, as though each identifier was implicitly
surrounded by
.QX \\\\I
except where counter-acted by
.QX \\\\J .
.TP
.BI \-idchars " charset"
Identifier characters.  The argument value specifies the set of
characters that will be considered to be identifier constituents, in
addition to letters and digits.  The default value is
.QX _ .
This affects the behavior of
.QX \\\\I ,
.QX <I> ,
and
.QX <Y> ,
and the
.B \-w
and
.B \-t
options.
For example, if you were processing
.SM COBOL
source code, you would need
.QX "\-idchars '-'".
For Lisp code, you would probably want something like:
.QX "\-idchars '-+=*/_<>'"
.TP
.BI \-filechars " charset"
File name characters.  The argument value specifies the set of
characters which are accepted by
.QX <F>
as being file name constituents, in addition to letters and digits.
The default value is
.QX "./\-_~#@%+="
for Unix.  On Windows, colon and backslash are also included in the
default set.
.TP
.BI \-literal " charset"
This option specifies that each of the characters in the argument value
will be treated as an ordinary literal character in patterns, instead of
whatever special meaning it might normally have.
For example, rather than saying something like:
.br
 \ \ \ \fBgema '\\/usr\\/foo\\/<F>=\\/usr\\/bar\\/$1'\fP \fI...\fP
.br
you could instead say:
.br
 \ \ \ \fBgema -literal / '/usr/foo/<F>=/usr/bar/$1'\fP \fI...\fP
.TP
.B \-ml
For convenience in processing Markup Languages (HTML, XML, etc.), this
option (which is new in version 1.4) 
changes the syntax so that the characters
.QX < ,
.QX >
and
.QX /
are taken as literals, using 
.QX [ ,
.QX ]
and
.QX |
respectively in their places.
For example:
.br
 \ \ \ \fBgema -ml -p '<i>[T]</i>=<em>$1</em>'\fP \fI...\fP
.br
has the same effect as:
.br
 \ \ \ \fBgema -p '\\<i\\><T>\\<\\/i\\>=\\<em\\>$1\\<\\/em\\>'\fP \fI...\fP
.br
The
.QX -ml
option is an abbreviation for
.QX @set-syntax{</>LLL;[|]</>} .
.TP
.BI \-arglen " number"
Specify the maximum length of a
.QX *
argument.  The default is 4096.
.TP
.BI \-prim " pattern_file"
Primitive mode (for advanced users only).
Like the
.B \-f
option, this loads patterns from a file.  It also suppresses loading of
the built-in patterns for command line processing.  This option is
meaningful only when it appears as the first argument, and then it
becomes the only argument that has any predefined meaning.  The
designated pattern file must define
.B ARGV
domain rules sufficient to specify what to do with the remainder of the
command line.
.TP
.B \-help
Display brief usage message on the standard error output.
.TP
.B \-version
Display program version identification on the standard error output.
.TP
.B \-trace
If the program was compiled with
.BR \-DTRACE,
then this option can be used to enable a report of template matches
and failures to be written to the error output.  This may be helpful for
diagnosing obscure cases of unexpected results, but this is a crude
experimental feature, so don't expect too much.
Each line describes one event, possibly showing the line and column number
at the beginning of the current template, the line and column of the
current position, and a description of the event, indented for recursive
arguments. 
.RE
.LP
.ne 6
.SH "PATTERNS REFERENCE SUMMARY"
The following characters have special meaning:
.LP
.TP
.B *
matches any number of characters
.TP
.B ?
matches any one character
.TP
.B #
argument recursively translated in the current domain
.TP
.B =
end of template, beginning of action
.TP
.B $0
copies the template into the action to show all matched text
.TP
.BI $ digit
inserts argument value
.TP
.BI $ letter
inserts value of a variable with single-letter name
.TP
.BI ${ name }
value of named variable (only in action)
.TP
.BI ${ name ; default }
variable with default value if not defined (action only)
.TP
\fB\e\fP
escape character; see the section on "escape sequences" below.
.TP
.BI ^ x
combine control key with the following character
.TP
.I Space
matches one or more whitespace characters (same as
.QX \\\\S ).
.TP
.I NewLine
end of action
.TP
.B ;
end of action, or separator between function arguments
.TP
.BI @ name { args }
invoke built-in function or user-defined translation domain (action only)
.TP
.BI @ special-character
has the default meaning of the special character by itself, as
documented here; this can be used to access the original functionality of a
character that has been changed by the
.B \-literal
option or
.B @set-syntax
function.
.TP
.B :
separates domain name from rule
.TP
.BI < name >
recursive argument, translated according to the named domain,
or pre-defined recognizer argument.  (template only)
.TP
.BI / regexp /
regular expression argument (template only)
.TP
.B !
the rest of the line is a comment
.LP
Also, as a special case, the first line of a pattern file is ignored if the
first two characters are
.QX #! .
This allows a pattern file to be made directly executable on Unix by putting
something like "\fB#!/usr/local/bin/gema -f\fP" as the first line.
.LP
.ne 6
.SH "ESCAPE SEQUENCES"
The backslash character denotes special handling for the character that
follows it.
When followed by a lower-case letter or a digit, it
represents a particular control character.
When followed by an upper
case letter, it is a pattern match operator.
A backslash at the end of
a line designates continuation by causing the newline to be ignored
along with any leading white space on the following line.
Before any other character, the backslash quotes the character so that
it simply represents itself.  In particular, a literal backslash is
represented by two backslashes.
.LP
Following are the defined escape sequences:
.LP
.TP
\fB\ea\fP
Alert (a.k.a. bell) character
.TP
\fB\eb\fP
Backspace character
.TP
\fB\ec\fP\fIx\fP
Control key combined with the following character
.TP
\fB\ed\fP
Delete character
.TP
\fB\ee\fP
Escape character (i.e. ESC, not backslash)
.TP
\fB\ef\fP
Form feed character
.TP
\fB\en\fP
New line character
.TP
\fB\er\fP
carriage Return character
.TP
\fB\es\fP
Space character
.TP
\fB\et\fP
horizontal Tab character
.TP
\fB\ev\fP
Vertical tab character
.TP
\fB\ex\fP\fIxx\fP
character specified by its heXadecimal code
.TP
\fB\e\fP\fIdigits\fP
character specified by its octal code
.TP
\fB\eA\fP
matches beginning of input data
.TP
\fB\eB\fP
matches Beginning of file
.TP
\fB\eC\fP
Case-insensitive comparison for the rest of the template
.TP
\fB\eE\fP
matches End of file
.TP
\fB\eG\fP
Goal -- complete preceding argument before considering rest of template
.TP
\fB\eI\fP
Identifier separator
.TP
\fB\eJ\fP
Join -- locally counteracts the
.B \-w
and/or
.B \-t
option by saying that spaces in the input will not be ignored at this
position, and an identifier delimiter is not required here.
If neither of these options is being used, then it has no effect.
.TP
\fB\eL\fP
Line mode -- following arguments can't cross line boundary
.TP
\fB\eN\fP
New line; matches beginning or end of line
.TP
\fB\eP\fP
Position -- leave input stream here after the template matches
.TP
\fB\eS\fP
Space -- matches one or more whitespace characters
.TP
\fB\eW\fP
Whitespace -- skips over any optional whitespace characters
.TP
\fB\eX\fP
word separator
.TP
\fB\eZ\fP
matches end of input data
.LP
.ne 6
.SH RECOGNIZERS
The following argument designators, consisting of a single letter between
angle brackets, can be used in templates to match on
various kinds of characters.  Preceding the letter with
.QX \-
inverts the test.  The argument requires at least one matching character
if the letter is uppercase, or is optional if the letter is lowercase.
The letter may be followed by a number to match on that many
characters, or up to that maximum for an optional argument.  If the
number is
.BR 0 ,
the argument matches if the next character is of the
indicated kind, but the input stream is not advanced past it; in other
words, this acts as a one-character look-ahead.
.TP
.B <A>
Alphanumeric (letters and digits)
.TP
.B <C>
Control characters
.TP
.B <D>
Digits
.TP
.B <F>
File pathname
.TP
.B <G>
Graphic characters, i.e. any non-space printable character
.TP
.B <I>
Identifier
.TP
.B <J>
lower case letters
.TP
.B <K>
upper case letters
.TP
.B <L>
Letters (either upper or lower case)
.TP
.B <N>
Number, i.e. digits with optional sign and decimal point
.TP
.B <O>
Octal digits
.TP
.B <P>
Printing characters, including space
.TP
.B <S>
white Space characters (space, tab, newline, FF, VT)
.TP
.B <T>
Text characters, including all printing characters and white space
.TP
.B <U>
Universal (matches anything except end-of-file)
.TP
.B <W>
Word (letters, apostrophe, and hyphen)
.TP
.B <X>
hexadecimal digits
.TP
.B <Y>
punctuation (graphic characters that are not identifiers)
.LP
.ne 6
.SH FUNCTIONS
The following built-in functions may be used in actions, either in the
action portion of a rule, or appearing by itself as an immediate action.
When a line in a pattern file begins with
.QX @ ,
the actions are executed before reading the next line.
.LP
Function calls have the form
"\fB@\fP\fIname\fP\fB{\fP\fIargs\fP\fB}\fP", with arguments separated by
.QX ; .
For functions
without arguments, the argument delimiters
.QX {}
may be omitted if not needed to separate the name from the following
character.  All arguments are evaluated, so all of the special
characters available in actions apply within the arguments also.
(In a few cases, arguments that are not used are skipped instead of
evaluated, but arguments are never used literally.)
Arguments shown as
.I number
or
.I length
must have a value which is a valid decimal representation of an integer,
with optional leading
whitespace and optional sign.  All numbers are considered to be 32 bit
signed integers.
The descriptions given here for the functions is just a terse reference
summary; refer to the user manual for more detailed information.
.LP
.TP
.B @abort{}
Immediately terminate execution.
.TP
.BI @add{ number ; number }
Return the sum of the two numbers.
.TP
.BI @and{ number ; number }
Return the bit-wise
.I and
of the two numbers.
.TP
.BI @append{ var ; string }
Append the string to the end of the named variable's value.  No return value.
.TP
.BI @bind{ var ; string }
Bind named variable to a value.  No return value.
.TP
.BI @center{ length ; string }
Center the string within a field of the designated length.
.TP
.BI @char-int{ character }
Returns decimal number representation of internal character code.
.TP
.BI @close{ pathname }
Closes a file previously opened by
.BI @write{ pathname }
.TP
\fB@cmpi{\fP\fIstring\fP\fB;\fP\fIstring\fP\fB;\fP\fIless-value\fP\fB;\fP\fIequal-value\fP\fB;\fP\fIgreater-value\fP\fB}\fP
Compare, case-insensitive.
Return either the third, fourth, or fifth argument value depending on
whether the first argument is less than, equal to, or greater than the
second.  The two unused arguments are not evaluated.
.TP
\fB@cmpn{\fP\fInumber\fP\fB;\fP\fInumber\fP\fB;\fP\fIless-value\fP\fB;\fP\fIequal-value\fP\fB;\fP\fIgreater-value\fP\fB}\fP
Compare numbers.
.TP
\fB@cmps{\fP\fIstring\fP\fB;\fP\fIstring\fP\fB;\fP\fIless-value\fP\fB;\fP\fIequal-value\fP\fB;\fP\fIgreater-value\fP\fB}\fP
Compare, case-sensitive.
.TP
.B @column{}
Returns the current column number in the input stream.
.TP
.B @date{}
Returns the current date, in the form
.IR mm / dd / yyyy
.TP
.B @datime{}
Returns the current date and time, formatted by the C function
.BR ctime (3).
.TP
.BI @decr{ var }
Decrement value of variable.  No return value.
.TP
.BI @define{ patterns }
Run-time definition of additional rules.  No return value.
.TP
.BI @div{ number ; number }
Return result of dividing the first argument by the second.
.TP
.BI @downcase{ string }
Convert any letters from upper case to lower case.
.TP
.B @end{}
End translation.  No return value.
.TP
.BI @err{ string }
Write the argument value to the error output stream. No return value.
.TP
.BI @exit-status{ number }
Specify exit code to return when the program terminates.  No return value.
.TP
.BI @expand-wild{ path }
Expand wild card pathname on MS-DOS or Windows.
.TP
.B @fail{}
Signal translation failure; causes failed match of recursive argument.
.TP
.B @file{}
Returns the name of the input file.
.TP
.B @file-time{}
Returns the modification time and date of the input file, formatted by
the C function
.BR ctime (3).
.TP
.BI @fill-center{ background ; value }
Center the value on top of the background string.
.TP
.BI @fill-left{ background ; value }
Left-justify the value on top of the background string.
.TP
.BI @fill-right{ background ; value }
Right-justify the value on top of the background string.
.TP
.BI @getenv{ name ; default }
Return the value of an environment variable.  Returns the optional second
argument if the environment variable is not defined.
.TP
.BI @get-switch{ name }
Return value of switch (see
.BR @set-switch )
.TP
.BI @incr{ var }
Increments the value of a variable.  No value returned.
.TP
.B @inpath{}
Returns the pathname of the input file.
.TP
.BI @int-char{ number }
Returns the character whose internal code is given by the argument.
.TP
.B @line{}
Returns the current line number in the input file.
.TP
.BI @left{ length ; string }
Left-justify the string, padding with spaces to the designated length.
.TP
.BI @length{ string }
Returns the length of the argument.
.TP
\fB@makepath{\fP\fIdirectory\fP\fB;\fP\fIname\fP\fB;\fP\fIsuffix\fP\fB}\fP
Returns the file pathname formed by merging the second argument with the
default directory in the first argument and replacing the suffix from
the third argument, if not empty.
.TP
\fB@mergepath{\fP\fIpathname\fP\fB;\fP\fIname\fP\fB;\fP\fIsuffix\fP\fB}\fP
Returns the file pathname formed by merging the second argument with a
default directory extracted from the first argument and replacing the
suffix from the third argument, if not empty.
.TP
.BI @mul{ number ; number }
Returns the result of multiplying the two numbers.
.TP
.BI @mod{ number ; number }
Returns the first argument modulo the second.
.TP
.BI @not{ number }
Returns the bit-wise inverse of the argument.
.TP
.BI @or{ number ; number }
Returns the bit-wise
.I or
of the two numbers.
.TP
.BI @out{ string }
Writes the argument value directly to the current output file.
No return value.
.TP
.B @out-column{}
Returns the current column number in the output file.
.TP
.BI @outpath{}
Returns the pathname of the output file.
.TP
.BI @push{ var ; value }
Set the value of a variable while remembering the previous value.
Same as
.BR @bind .
.TP
.BI @pop{ var }
Restore the variable to the value it had before the most recent
.BR @push .
Same as
.BR @unbind .
.TP
.BI @probe{ pathname }
Return "F" if the argument names a file, "D" if a directory,
"V" if a device, or "U" if undefined.
.TP
.BI @quote{ string }
Returns a copy of the argument with backslashes inserted where necessary
so that
.B @define
will treat all of the characters as literals.
.TP
\fB@radix{\fP\fIfrom\fP\fB;\fP\fIto\fP\fB;\fP\fIvalue\fP\fB}\fP
Radix conversion.
The first two arguments must be decimal integers.  The third argument is
interpreted as a number whose base is specified by the first argument.
The result value is that number represented in the base specified by the
second argument.
.TP
.BI @read{ pathname }
Return an input stream that reads the contents of the named file.
Note that this just specifies where the input comes from; it is usually
used as an argument to another function that specifies what to 
do with the data.
.TP
.BI @relative-path{ pathname ; pathname }
If the two pathnames have the same directory portion, return the second
argument with the common directory removed; else return the whole second
argument.
.TP
.BI @repeat{ number ; action }
The second argument is executed the number of times specified by the
first argument.  If the number is less than or equal to zero, the second
argument is not evaluated at all.
.TP
.B @reset-syntax{}
Re-initializes the syntax tables to undo the effects of
.B @set-syntax
or the
.B -literal
option.
.TP
.BI @reverse{ string }
Return the characters of the argument in reverse order.
.TP
.BI @right{ length ; string }
Right-justify the string, padding with spaces to the designated length.
.TP
.BI @set{ var ; value }
Set the named variable to the designated value.  No return value.
.TP
.BI @set-locale{ name }
Set internationalization locale, using
.BR setlocale (3).
This may affect which characters are considered to be letters, and the
format of times and dates.  No result value.
.TP
.BI @set-parm{ name ; value }
Set a string-valued option, either "idchars", "filechars", or "backup".
No result value.
.TP
.BI @set-switch{ name ; value }
Set one of the following options to 1 for true or 0 for false:
"line" for line mode, "b" for binary mode, "k" to keep going after errors,
"match" for match-only mode, "i" for case-insensitive mode,
"w" for whitespace insensitive mode, "t" for token mode, or "trace".
.TP
.BI @set-syntax{ type ; charset }
The characters in the second argument will have the same meaning as
the corresponding special character(s) in the first argument, or use one
of the alphabetic type codes: "L" for literal, "I" for ignore, etc.
No result value.
.TP
.BI @set-wrap{ number ; string }
For
.BR @wrap ,
the first argument is the number of columns, and the second argument is
the indentation string.  No result value.
.TP
.BI @shell{ string }
The argument is executed as a shell command.  No return value.
.TP
.BI @show-help{}
Display usage message on the standard error stream.
.TP
.BI @sub{ number ; number }
Subtract.
.TP
.BI @subst{ patterns ; operand }
Substitution.
Return the result of translating the operand according to the patterns
temporarily defined by the first argument.
.TP
\fB@substring{\fP\fIskip\fP\fB;\fP\fIlength\fP\fB;\fP\fIstring\fP\fB}\fP
Return substring of the third argument by skipping the number of
characters indicated by the first argument and then taking the number of
characters indicated by the second argument.
.TP
.BI @tab{ number }
Output spaces until the output stream reaches the designated column.
.TP
.BI @terminate{}
End translation of a recursive argument, with success if any characters
have been accepted, or failure if the argument value is empty.
.TP
.BI @time{}
Return the current time, in the form
.IR hh : mm : ss
.TP
.BI @unbind{ var }
Restore the variable to the value, if any, it had before the most recent
.BR @bind .
.TP
.BI @undefine{ patterns }
Delete pattern definitions.
.TP
.BI @upcase{ string }
Convert any letters from lower case to upper case.
.TP
.BI @var{ var ; default }
Return the value of the named variable.  If the variable is not defined,
return the optional second argument, if supplied, else report an error.
.B @var
has the same effect as
.B $
when the name is not a number.
.TP
.B @version{}
Return the program version identification string.
.TP
.BI @wrap{ string }
Output the string, after starting a new line if necessary
according to the parameters set by
.BR @set-wrap .
The default is 80 columns and no indentation.
.TP
.BI @write{ pathname ; string }
The second argument is evaluated with its result value being written to
the file named by the first argument.  Subsequent calls to
.B @write
with the same pathname will append to the file, until a
.BR @close .
.LP
.SH BUGS
The implementation of the
.B \-t
and 
.B \-w
options is a little sloppy and may produce unexpected results requiring
use of explicit \fB\eJ\fP, \fB\eI\fP, or \fB\eW\fP to work around in
certain contexts.
.LP
.SH SEE ALSO
The
.B gema
user manual and the example pattern files provided.
.LP
The source files and documentation can be downloaded from
.QX http://sourceforge.net/projects/gema/
or
.QX http://www.cbayona.com/pub/Macro%20Languages/Gema/ .
The documentation can be read at
.QX http://gema.sourceforge.net/ .
.LP
.SH AUTHORS
.PP
.B gema
was written by David N. Gray <DGray@acm.org>.
