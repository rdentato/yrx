
  This directory contains "gema", the general-purpose macro processor.
  The sub-directories are:

     src        source program (in ANSI C)
     doc        documentation, including Unix "man" page and user manual.
     examples   sample applications, including LaTeX to HTML conversion.
     test       script and data for verification of build

  This description applies to version 1.4.

  The program currently works on several varieties of Unix, MS-DOS,
  Microsoft Windows, and Macintosh (both OS-X and earlier MACOS with
  MPW). It may need some modification for use on other systems, particular
  in regard to pathname syntax and accessing file attributes; see the
  places where ``#ifdef unix'', ``#ifdef MSDOS'', and ``#ifdef MACOS'' are
  used.

  This version also includes a binding for the programming language Lua.
  
  On most systems, you can build the program by just cd-ing to the "src"
  directory and then running the command "gbuild all".  This will build 
  the gema programs and, if the build script it's able to find Lua
  includes and libraries, the two Lua-bound programs: gel and gua.
  The gbuild script automatically selects the appropriate compiler
  options for any of many common operating systems.
  
  If your configuration can't be detected by gbuild, you can set the
  appropriate values in the "defaults" section of the script.

  See building.txt in the doc directory or http://gema.sourceforge.net/docs.shtml
  
  Further build details if needed:

    To build the program, you just need to use an ANSI C compiler to
    compile all of the ".c" files and link the resulting object files
    together.  An example "Makefile" for Unix is provided.  Normally you
    should compile with optimization and with the option "-DNDEBUG" to omit
    internal debugging checks.  You may also want to use "-DTRACE" to
    enable the experimental diagnostic trace option.
 
    After building the program, you can verify that it works correctly by
    running the command "gbuild test" in the "src" directory.
    
    Tests results will appear in response.

  The "examples" directory includes the following non-trivial pattern files
  for document conversion:

      latex.dat      convert LaTeX to HTML
      man-html.dat   convert "man" page from "nroff" to HTML
      ht.dat         convert HTML to LaTeX
      tex.dat        used with "latex.dat" for low-level TeX features

      xml.gel        implements a simple XML translator. See files in 
                     gxml.lib directory to see how to write handlers
      
  The script "latex.sh" can be used for LaTeX to HTML conversion after
  modifying it for the actual location of the files used.  It takes care of
  automatically running the program a second time when needed to resolve
  forward references. 

  These conversion pattern files are not complete; they have been
  sufficient for the documents I have been working with, but you may find
  additional features that you need.  The conversion provides a clear
  warning about what is not recognized, and extending the patterns is easy.

  Also in the "examples" directory is file "c2dyl.dat", which reads C
  source files and does a crude preliminary syntax conversion to the new
  Dylan programming language.  Even if you aren't interested in Dylan, this
  file serves as an example of how recursive pattern matching can be used
  to parse infix expressions; note how the rules look very similar to a BNF
  description of the expression syntax.

  The gxml script is a frontend for the xml parser.
  
  "gema" is not a commercial product; it is distributed as open source
  software in order to maximize its usefulness.  Let me know if you find any
  bugs, but I don't promise to fix them.  If you fix something or extend
  the program yourself, please send me your improvements.  Also send me
  e-mail if you would like to be informed of any future updates.


				David N. Gray

				e-mail:  DGray@acm.org

				175 Dalma Drive
				Mountain View, CA  94041

				December, 2003

